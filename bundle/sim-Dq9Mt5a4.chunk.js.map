{"version":3,"file":"sim-Dq9Mt5a4.chunk.js","sources":["../../../ui/retribution_paladin/inputs.ts","../../../ui/retribution_paladin/presets.ts","../../../ui/retribution_paladin/sim.ts"],"sourcesContent":["import { Player } from '../core/player.js';\nimport { ItemSlot, Spec } from '../core/proto/common.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport {\n\tPaladinSeal,\n\tPaladinRune,\n} from '../core/proto/paladin.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\n// export const AuraSelection = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRetributionPaladin, PaladinAura>({\n// \tfieldName: 'aura',\n// \tvalues: [\n// \t\t{ value: PaladinAura.NoPaladinAura, tooltip: 'No Aura' },\n// \t\t{ actionId: () => ActionId.fromSpellId(10299), value: PaladinAura.RetributionAura },\n// \t],\n// });\n\n// The below is used in the custom APL action \"Cast Primary Seal\".\n// Only shows SoC if it's talented, only shows SoM if the relevant rune is equipped.\nexport const PrimarySealSelection = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecRetributionPaladin, PaladinSeal>({\n\tfieldName: 'primarySeal',\n\tvalues: [\n\t\t{\n\t\t\tactionId: (player) => player.getMatchingSpellActionId([\n\t\t\t\t{id: 20154,\tmaxLevel: 9},\n\t\t\t\t{id: 20287, minLevel: 10, maxLevel: 17},\n\t\t\t\t{id: 20288, minLevel: 18, maxLevel: 25},\n\t\t\t\t{id: 20289, minLevel: 26, maxLevel: 33},\n\t\t\t\t{id: 20290, minLevel: 34, maxLevel: 41},\n\t\t\t\t{id: 20291, minLevel: 42, maxLevel: 49},\n\t\t\t\t{id: 20292, minLevel: 50, maxLevel: 57},\n\t\t\t\t{id: 20293, minLevel: 58},\n\t\t\t]),\n\t\t\tvalue: PaladinSeal.Righteousness \n\t\t},\n\t\t{\n\t\t\tactionId: (player) => player.getMatchingSpellActionId([\n\t\t\t\t{id: 20375, maxLevel: 29},\n\t\t\t\t{id: 20915, minLevel: 30, maxLevel: 39},\n\t\t\t\t{id: 20918, minLevel: 40, maxLevel: 49},\n\t\t\t\t{id: 20919, minLevel: 50, maxLevel: 59},\n\t\t\t\t{id: 20920, minLevel: 60},\n\t\t\t]),\n\t\t\tvalue: PaladinSeal.Command,\n\t\t\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getTalents().sealOfCommand,\n\t\t},\n\t\t{\n\t\t\tactionId: () => ActionId.fromSpellId(407798),\n\t\t\tvalue: PaladinSeal.Martyrdom,\n\t\t\tshowWhen: (player: Player<Spec.SpecRetributionPaladin>) => player.getEquippedItem(ItemSlot.ItemSlotChest)?.rune?.id == PaladinRune.RuneChestSealOfMartyrdom,\n\t\t},\n\t],\n\t// changeEmitter: (player: Player<Spec.SpecRetributionPaladin>) => player.changeEmitter,\n\tchangeEmitter: (player: Player<Spec.SpecRetributionPaladin>) => TypedEvent.onAny([\n\t\tplayer.gearChangeEmitter, player.talentsChangeEmitter, player.specOptionsChangeEmitter, player.levelChangeEmitter\n\t]),\n});\n\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tAgilityElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tExplosive,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tSpellPowerBuff,\n\tStrengthBuff,\n\tTristateEffect,\n\tWeaponImbue,\n} from '../core/proto/common.js';\nimport { PaladinAura, PaladinSeal, RetributionPaladin_Options as RetributionPaladinOptions } from '../core/proto/paladin.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport APLP1RetJson from './apls/p1ret.apl.json';\nimport APLP2RetJson from './apls/p2ret.apl.json';\nimport Phase1RetGearJson from './gear_sets/p1ret.gear.json';\nimport Phase2RetSoCGearJson from './gear_sets/p2retsoc.gear.json';\nimport Phase2RetSoMGearJson from './gear_sets/p2retsom.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const Phase1RetGear = PresetUtils.makePresetGear('P1', Phase1RetGearJson);\nexport const Phase2RetSoCGear = PresetUtils.makePresetGear('P2 SoC/DS', Phase2RetSoCGearJson);\nexport const Phase2RetSoMGear = PresetUtils.makePresetGear('P2 SoM', Phase2RetSoMGearJson);\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [Phase1RetGear],\n\t[Phase.Phase2]: [Phase2RetSoCGear, Phase2RetSoMGear],\n\t[Phase.Phase3]: [],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Phase 3\nexport const DefaultGear = GearPresets[Phase.Phase2][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLP1Ret = PresetUtils.makePresetAPLRotation('P1 Ret', APLP1RetJson);\nexport const APLP2Ret = PresetUtils.makePresetAPLRotation('P2 Ret/Shockadin', APLP2RetJson);\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLP1Ret],\n\t[Phase.Phase2]: [APLP2Ret],\n\t[Phase.Phase3]: [],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n\t25: APLPresets[Phase.Phase1][0],\n\t40: APLPresets[Phase.Phase2][0],\n\t// TODO: Phase 3\n\t50: APLPresets[Phase.Phase2][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const P1RetTalents = {\n\tname: 'P1 Ret',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--05230051',\n\t}),\n};\n\nexport const P2RetTalents = {\n\tname: 'P2 Ret',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--532300512003151',\n\t}),\n};\n\nexport const P2ShockadinTalents = {\n\tname: 'P2 Shockadin',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '55050100521151--',\n\t}),\n};\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [P1RetTalents],\n\t[Phase.Phase2]: [P2RetTalents, P2ShockadinTalents],\n\t[Phase.Phase3]: [],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Phase 3\nexport const DefaultTalents = TalentPresets[Phase.Phase2][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = RetributionPaladinOptions.create({\n\taura: PaladinAura.RetributionAura,\n\tprimarySeal: PaladinSeal.Command,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfAgility,\n\tboglingRoot: false,\n\tdefaultPotion: Potions.GreaterManaPotion,\n\tdragonBreathChili: true,\n\tenchantedSigil: EnchantedSigil.InnovationSigil,\n\tfillerExplosive: Explosive.ExplosiveEzThroRadiationBomb,\n\tfood: Food.FoodSagefishDelight,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\tspellPowerBuff: SpellPowerBuff.LesserArcaneElixir,\n\tstrengthBuff: StrengthBuff.ScrollOfStrength,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\tblessingOfKings: true,\n\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\tsparkOfInspiration: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\tsanctityAura: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfRecklessness: true,\n\tfaerieFire: true,\n\thomunculi: 70, // 70% average uptime default\n\tsunderArmor: true,\n\tjudgementOfWisdom: true,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Blacksmithing,\n\tprofession2: Profession.Enchanting,\n};\n","import * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport {\n\tClass,\n\tFaction,\n\tPartyBuffs,\nPseudoStat,\n\tRace,\n\tSpec,\n\tStat, } from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport * as RetributionPaladinInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecRetributionPaladin, {\n\tcssClass: 'retribution-paladin-sim-ui',\n\tcssScheme: 'paladin',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t`Judgement of the Crusader is currently not implemented; users can manually award themselves the relevant spellpower amount\n\t\tfor a dps gain that will be slightly inflated given JotC does not benefit from source damage modifiers.`,\n\t\t`Be aware that not all item and weapon enchants are currently implemented in the sim, which make some notable Retribution\n\t\tweapons like Pendulum of Doom and The Jackhammer undervalued.`,\n\t],\n\twarnings: [\n\t\t(simUI: IndividualSimUI<Spec.SpecRetributionPaladin>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getSpecOptions().primarySeal == 0) {\n\t\t\t\t\t\t\treturn `Your previously selected seal is no longer available because of a talent or rune change.\n\t\t\t\t\t\t\tNo seal will be cast with this configuration. Please select an available seal in the Settings>Player menu.`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t],\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatMP5,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatSpellPower,\n\t\tStat.StatHolyPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatMP5,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatSpellPower,\n\t\tStat.StatHolyPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMana,\n\t\tStat.StatHealth,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatStrength]: 2.53,\n\t\t\t[Stat.StatAgility]: 1.13,\n\t\t\t[Stat.StatIntellect]: 0.15,\n\t\t\t[Stat.StatSpellPower]: 0.32,\n\t\t\t[Stat.StatSpellHit]: 0.41,\n\t\t\t[Stat.StatSpellCrit]: 0.01,\n\t\t\t[Stat.StatSpellHaste]: 0.12,\n\t\t\t[Stat.StatMP5]: 0.05,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatMeleeHit]: 1.96,\n\t\t\t[Stat.StatMeleeCrit]: 1.16,\n\t\t\t[Stat.StatMeleeHaste]: 1.44,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 7.33,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t\trace: Race.RaceHuman,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t\tRetributionPaladinInputs.PrimarySealSelection,\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase2],\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase2],\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase2],\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t],\n\t},\n\n\tautoRotation: player => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecRetributionPaladin,\n\t\t\ttooltip: 'Retribution Paladin',\n\t\t\tdefaultName: 'Retribution',\n\t\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 2),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Horde]: Race.RaceUnknown,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t\t2: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class RetributionPaladinSimUI extends IndividualSimUI<Spec.SpecRetributionPaladin> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRetributionPaladin>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["PrimarySealSelection","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","actionId","player","getMatchingSpellActionId","id","maxLevel","minLevel","value","PaladinSeal","Righteousness","Command","showWhen","getTalents","sealOfCommand","ActionId","fromSpellId","Martyrdom","getEquippedItem","ItemSlot","ItemSlotChest","rune","PaladinRune","RuneChestSealOfMartyrdom","changeEmitter","TypedEvent","onAny","gearChangeEmitter","talentsChangeEmitter","specOptionsChangeEmitter","levelChangeEmitter","Phase1RetGear","PresetUtils.makePresetGear","Phase2RetSoCGear","Phase2RetSoCGearJson","Phase2RetSoMGear","Phase2RetSoMGearJson","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","APLP1Ret","PresetUtils.makePresetAPLRotation","APLP1RetJson","APLP2Ret","APLP2RetJson","APLPresets","DefaultAPLs","P1RetTalents","name","data","SavedTalents","create","talentsString","P2RetTalents","P2ShockadinTalents","TalentPresets","DefaultTalents","DefaultOptions","RetributionPaladinOptions","aura","PaladinAura","RetributionAura","primarySeal","DefaultConsumes","Consumes","agilityElixir","AgilityElixir","ElixirOfAgility","boglingRoot","defaultPotion","Potions","GreaterManaPotion","dragonBreathChili","enchantedSigil","EnchantedSigil","InnovationSigil","fillerExplosive","Explosive","ExplosiveEzThroRadiationBomb","food","Food","FoodSagefishDelight","mainHandImbue","WeaponImbue","WildStrikes","spellPowerBuff","SpellPowerBuff","LesserArcaneElixir","strengthBuff","StrengthBuff","ScrollOfStrength","DefaultIndividualBuffs","IndividualBuffs","blessingOfMight","TristateEffect","TristateEffectImproved","blessingOfKings","blessingOfWisdom","sparkOfInspiration","saygesFortune","SaygesFortune","SaygesDamage","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","battleShout","divineSpirit","giftOfTheWild","manaSpringTotem","TristateEffectRegular","sanctityAura","DefaultDebuffs","Debuffs","curseOfRecklessness","faerieFire","homunculi","sunderArmor","judgementOfWisdom","OtherDefaults","profession1","Profession","Blacksmithing","profession2","Enchanting","SPEC_CONFIG","registerSpecConfig","Spec","SpecRetributionPaladin","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","getContent","getSpecOptions","epStats","Stat","StatStrength","StatAgility","StatIntellect","StatMP5","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatSpellPower","StatHolyPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatMana","StatHealth","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","race","Race","RaceHuman","playerIconInputs","RetributionPaladinInputs.PrimarySealSelection","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","rotations","Presets.APLPresets","Presets.TalentPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassPaladin","defaultFactionRaces","Faction","Alliance","Unknown","RaceUnknown","Horde","defaultGear","RetributionPaladinSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"4YAyBa,MAAAA,EAAuBC,EAAoF,CACvHC,UAAW,cACXC,OAAQ,CACP,CACCC,SAAWC,GAAWA,EAAOC,yBAAyB,CACrD,CAACC,GAAI,MAAOC,SAAU,GACtB,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,MAEvBC,MAAOC,EAAYC,eAEpB,CACCR,SAAWC,GAAWA,EAAOC,yBAAyB,CACrD,CAACC,GAAI,MAAOC,SAAU,IACtB,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,GAAID,SAAU,IACpC,CAACD,GAAI,MAAOE,SAAU,MAEvBC,MAAOC,EAAYE,QACnBC,SAAWT,GAAgDA,EAAOU,aAAaC,eAEhF,CACCZ,SAAU,IAAMa,EAASC,YAAY,QACrCR,MAAOC,EAAYQ,UACnBL,SAAWT,GAAgDA,EAAOe,gBAAgBC,EAASC,gBAAgBC,MAAMhB,IAAMiB,EAAYC,2BAIrIC,cAAgBrB,GAAgDsB,EAAWC,MAAM,CAChFvB,EAAOwB,kBAAmBxB,EAAOyB,qBAAsBzB,EAAO0B,yBAA0B1B,EAAO2B,yqECzBpFC,EAAgBC,EAA2B,qTAC3CC,EAAmBD,EAA2B,YAAaE,GAC3DC,EAAmBH,EAA2B,SAAUI,GAExDC,EAAc,CAC1B,CAACC,EAAMC,QAAS,CAACR,GACjB,CAACO,EAAME,QAAS,CAACP,EAAkBE,GACnC,CAACG,EAAMG,QAAS,GAChB,CAACH,EAAMI,QAAS,GAChB,CAACJ,EAAMK,QAAS,IAIJC,EAAcP,EAAYC,EAAME,QAAQ,GAMxCK,EAAWC,EAAkC,SAAUC,GACvDC,EAAWF,EAAkC,mBAAoBG,GAEjEC,EAAa,CACzB,CAACZ,EAAMC,QAAS,CAACM,GACjB,CAACP,EAAME,QAAS,CAACQ,GACjB,CAACV,EAAMG,QAAS,GAChB,CAACH,EAAMI,QAAS,GAChB,CAACJ,EAAMK,QAAS,IAGJQ,EAA0D,CACtE,GAAID,EAAWZ,EAAMC,QAAQ,GAC7B,GAAIW,EAAWZ,EAAME,QAAQ,GAE7B,GAAIU,EAAWZ,EAAME,QAAQ,IAUjBY,GAAe,CAC3BC,KAAM,SACNC,KAAMC,EAAaC,OAAO,CACzBC,cAAe,gBAIJC,GAAe,CAC3BL,KAAM,SACNC,KAAMC,EAAaC,OAAO,CACzBC,cAAe,uBAIJE,GAAqB,CACjCN,KAAM,eACNC,KAAMC,EAAaC,OAAO,CACzBC,cAAe,sBAIJG,GAAgB,CAC5B,CAACtB,EAAMC,QAAS,CAACa,IACjB,CAACd,EAAME,QAAS,CAACkB,GAAcC,IAC/B,CAACrB,EAAMG,QAAS,GAChB,CAACH,EAAMI,QAAS,GAChB,CAACJ,EAAMK,QAAS,IAIJkB,GAAiBD,GAActB,EAAME,QAAQ,GAM7CsB,GAAiBC,EAA0BP,OAAO,CAC9DQ,KAAMC,EAAYC,gBAClBC,YAAa1D,EAAYE,UAGbyD,GAAkBC,EAASb,OAAO,CAC9Cc,cAAeC,EAAcC,gBAC7BC,aAAa,EACbC,cAAeC,EAAQC,kBACvBC,mBAAmB,EACnBC,eAAgBC,EAAeC,gBAC/BC,gBAAiBC,EAAUC,6BAC3BC,KAAMC,EAAKC,oBACXC,cAAeC,EAAYC,YAC3BC,eAAgBC,EAAeC,mBAC/BC,aAAcC,EAAaC,mBAGfC,GAAyBC,EAAgBzC,OAAO,CAC5D0C,gBAAiBC,EAAeC,uBAChCC,iBAAiB,EACjBC,iBAAkBH,EAAeC,uBACjCG,oBAAoB,EACpBC,cAAeC,EAAcC,eAGjBC,GAAmBC,EAAUpD,OAAO,CAChDqD,kBAAkB,EAClBC,YAAaX,EAAeC,uBAC5BW,cAAc,EACdC,cAAeb,EAAeC,uBAC9Ba,gBAAiBd,EAAee,sBAChCC,cAAc,IAGFC,GAAiBC,EAAQ7D,OAAO,CAC5C8D,qBAAqB,EACrBC,YAAY,EACZC,UAAW,GACXC,aAAa,EACbC,mBAAmB,IAGPC,GAAgB,CAC5BC,YAAaC,EAAWC,cACxBC,YAAaF,EAAWG,YC/InBC,GAAcC,EAAmBC,EAAKC,uBAAwB,CACnEC,SAAU,6BACVC,UAAW,UAEXC,YAAa,CACZ,0OAEA,+LAGDC,SAAU,CACRC,IACO,CACNC,SAAUD,EAAMtI,OAAOqB,cACvBmH,WAAY,IACsC,GAA7CF,EAAMtI,OAAOyI,iBAAiBzE,YACzB,qNAGD,MAOZ0E,QAAS,CACRC,EAAKC,aACLD,EAAKE,YACLF,EAAKG,cACLH,EAAKI,QACLJ,EAAKK,gBACLL,EAAKM,aACLN,EAAKO,cACLP,EAAKQ,eACLR,EAAKS,eACLT,EAAKU,cACLV,EAAKW,cACLX,EAAKY,aACLZ,EAAKa,gBAENC,cAAe,CACdC,EAAWC,uBAGZC,gBAAiBjB,EAAKK,gBAEtBa,aAAc,CACblB,EAAKC,aACLD,EAAKE,YACLF,EAAKG,cACLH,EAAKI,QACLJ,EAAKK,gBACLL,EAAKM,aACLN,EAAKO,cACLP,EAAKQ,eACLR,EAAKa,eACLb,EAAKS,eACLT,EAAKU,cACLV,EAAKW,cACLX,EAAKY,aACLZ,EAAKmB,SACLnB,EAAKoB,YAGNC,SAAU,CAETC,KAAMC,EAAoBD,KAE1BE,UAAWC,EAAMC,QAAQ,CACxB,CAAC1B,EAAKC,cAAe,KACrB,CAACD,EAAKE,aAAc,KACpB,CAACF,EAAKG,eAAgB,IACtB,CAACH,EAAKS,gBAAiB,IACvB,CAACT,EAAKY,cAAe,IACrB,CAACZ,EAAKW,eAAgB,IACtB,CAACX,EAAKa,gBAAiB,IACvB,CAACb,EAAKI,SAAU,IAChB,CAACJ,EAAKK,iBAAkB,EACxB,CAACL,EAAKM,cAAe,KACrB,CAACN,EAAKO,eAAgB,KACtB,CAACP,EAAKQ,gBAAiB,MACrB,CACF,CAACO,EAAWC,uBAAwB,OAGrCW,SAAUC,GAEVC,QAASC,GAAuBtH,KAEhCuH,YAAaC,GACbC,MAAOC,GAEPC,UAAWC,GACXC,WAAYC,EAAW5H,OAAO,IAE9B6H,gBAAiBC,GACjBC,QAASC,GACTC,KAAMC,EAAKC,WAIZC,iBAAkB,CACjBC,GAGDC,wBAAyB,GAEzBC,wBAAyB,GAGzBC,YAAa,CACZC,OAAQ,CACPC,EACAC,IAGFC,gBAAiB,CAEhBC,uBAAuB,GAGxBC,QAAS,CACRC,UAAW,IACPC,EAAmBlK,EAAME,WACzBgK,EAAmBlK,EAAMC,SAG7BoI,QAAS,IACL8B,GAAsBnK,EAAME,WAC5BiK,GAAsBnK,EAAMC,SAGhC6H,KAAM,IACFsC,EAAoBpK,EAAME,WAC1BkK,EAAoBpK,EAAMC,UAI/BoK,aAAwBxM,GAChByM,EAAoBzM,EAAO0M,YAAYC,SAASA,SAGxDC,eAAgB,CACf,CACCC,KAAM7E,EAAKC,uBACX6E,QAAS,sBACTC,YAAa,cACbC,QAASC,EAAYC,EAAMC,aAAc,GAEzC3C,QAASC,GAAuBtH,KAChCuH,YAAaC,GACbL,SAAUC,GACV6C,oBAAqB,CACpB,CAACC,EAAQC,UAAW/B,EAAKC,UACzB,CAAC6B,EAAQE,SAAUhC,EAAKiC,YACxB,CAACH,EAAQI,OAAQlC,EAAKiC,aAEvBE,YAAa,CACZ,CAACL,EAAQE,SAAU,CAAC,EACpB,CAACF,EAAQC,UAAW,CACnB,EAAGf,EAAoBpK,EAAMC,QAAQ,GAAG6H,KACxC,EAAGsC,EAAoBpK,EAAMC,QAAQ,GAAG6H,MAEzC,CAACoD,EAAQI,OAAQ,CAAC,OAMf,MAAME,WAAgCC,EAC5C,WAAAC,CAAYC,EAAyB9N,GAC9B+N,MAAAD,EAAY9N,EAAQ8H,GAC3B"}