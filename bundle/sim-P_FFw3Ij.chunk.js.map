{"version":3,"file":"sim-P_FFw3Ij.chunk.js","sources":["../../../ui/shadow_priest/inputs.ts","../../../ui/shadow_priest/presets.ts","../../../ui/shadow_priest/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport {\n\tShadowPriest_Options_Armor as Armor,\n} from '../core/proto/priest.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ArmorInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecShadowPriest, Armor>({\n\tfieldName: 'armor',\n\tvalues: [\n\t\t{ value: Armor.NoArmor, tooltip: 'No Inner Fire' },\n\t\t{ actionId: () => ActionId.fromSpellId(10952), value: Armor.InnerFire },\n\t],\n});\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tFlask,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tShadowPowerBuff,\n\tSpellPowerBuff,\n\tTristateEffect,\n\tWeaponImbue,\n\tZanzaBuff,\n} from '../core/proto/common.js';\nimport { ShadowPriest_Options as Options } from '../core/proto/priest.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\nimport Phase3APL from './apls/phase_3.apl.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\nimport Phase3Gear from './gear_sets/phase_3.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\nexport const GearPhase3 = PresetUtils.makePresetGear('Phase 3', Phase3Gear);\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearPhase1],\n\t[Phase.Phase2]: [GearPhase2],\n\t[Phase.Phase3]: [GearPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Add Phase 3 preset and pull from map\nexport const DefaultGear = GearPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\nexport const APLPhase3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3APL);\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLPhase1],\n\t[Phase.Phase2]: [APLPhase2],\n\t[Phase.Phase3]: [APLPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Add Phase 3 preset and pull from map\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n\t25: APLPresets[Phase.Phase1][0],\n\t40: APLPresets[Phase.Phase2][0],\n\t50: APLPresets[Phase.Phase3][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-20535000001',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '--5022204002501251',\n\t}),\n};\n\nexport const TalentsPhase3 = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-0055-5022204002501251',\n\t}),\n};\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [TalentsPhase1],\n\t[Phase.Phase2]: [TalentsPhase2],\n\t[Phase.Phase3]: [TalentsPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Add Phase 3 preset and pull from map\nexport const DefaultTalents = TalentPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = Options.create({});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.GreaterManaPotion,\n\tenchantedSigil: EnchantedSigil.LivingDreamsSigil,\n\tflask: Flask.FlaskOfRestlessDreams,\n\tfood: Food.FoodNightfinSoup,\n\tmainHandImbue: WeaponImbue.LesserWizardOil,\n\tmildlyIrradiatedRejuvPot: true,\n\tshadowPowerBuff: ShadowPowerBuff.ElixirOfShadowPower,\n\tspellPowerBuff: SpellPowerBuff.ArcaneElixir,\n\tzanzaBuff: ZanzaBuff.AtalaiMojoOfForbiddenMagic,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tmanaSpringTotem: TristateEffect.TristateEffectImproved,\n\tmoonkinAura: true,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tfervorOfTheTempleExplorer: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n\tsongflowerSerenade: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfShadowNew: TristateEffect.TristateEffectRegular,\n\timprovedShadowBolt: true,\n});\n\nexport const OtherDefaults = {\n\tchannelClipDelay: 100,\n\tprofession1: Profession.Alchemy,\n\tprofession2: Profession.Enchanting,\n};\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { Class, Faction, PartyBuffs, Race, Spec, Stat } from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport * as ShadowPriestInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecShadowPriest, {\n\tcssClass: 'shadow-priest-sim-ui',\n\tcssScheme: 'priest',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: ['The Homunculi Rune is not currently implemented until more data is available'],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatShadowPower,\n\t\tStat.StatHolyPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatSpellPenetration,\n\t\tStat.StatMP5,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatShadowPower,\n\t\tStat.StatHolyPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellPenetration,\n\t\tStat.StatMP5,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecShadowPriest>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().shadowFocus * 2 * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.16,\n\t\t\t[Stat.StatSpirit]: 0.01,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellDamage]: 1,\n\t\t\t[Stat.StatShadowPower]: 1,\n\t\t\t[Stat.StatSpellHit]: 5.51,\n\t\t\t[Stat.StatSpellCrit]: 5.99, // Averaged between using and not using Despair for dot crits\n\t\t\t[Stat.StatSpellHaste]: 1.65,\n\t\t\t[Stat.StatMP5]: 0.0,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\tpartyBuffs: PartyBuffs.create({}),\n\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\n\t\tdebuffs: Presets.DefaultDebuffs,\n\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [ShadowPriestInputs.ArmorInput],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.BlessingOfWisdom, BuffDebuffInputs.ManaSpringTotem, BuffDebuffInputs.StaminaBuff],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [OtherInputs.TankAssignment, OtherInputs.ChannelClipDelay],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [...Presets.TalentPresets[Phase.Phase3], ...Presets.TalentPresets[Phase.Phase2], ...Presets.TalentPresets[Phase.Phase1]],\n\t\trotations: [...Presets.APLPresets[Phase.Phase3], ...Presets.APLPresets[Phase.Phase2], ...Presets.APLPresets[Phase.Phase1]],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [...Presets.GearPresets[Phase.Phase3], ...Presets.GearPresets[Phase.Phase2], ...Presets.GearPresets[Phase.Phase1]],\n\t},\n\n\tautoRotation: player => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecShadowPriest,\n\t\t\ttooltip: specNames[Spec.SpecShadowPriest],\n\t\t\tdefaultName: 'Shadow',\n\t\t\ticonUrl: getSpecIcon(Class.ClassPriest, 2),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDwarf,\n\t\t\t\t[Faction.Horde]: Race.RaceUndead,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class ShadowPriestSimUI extends IndividualSimUI<Spec.SpecShadowPriest> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecShadowPriest>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["ArmorInput","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","Armor","NoArmor","tooltip","actionId","ActionId","fromSpellId","InnerFire","GearPhase1","PresetUtils.makePresetGear","GearPhase2","Phase2Gear","GearPhase3","Phase3Gear","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase2","Phase2APL","APLPhase3","Phase3APL","APLPresets","DefaultAPLs","TalentsPhase1","name","data","SavedTalents","create","talentsString","TalentsPhase2","TalentsPhase3","TalentPresets","DefaultTalents","DefaultOptions","Options","DefaultConsumes","Consumes","defaultPotion","Potions","GreaterManaPotion","enchantedSigil","EnchantedSigil","LivingDreamsSigil","flask","Flask","FlaskOfRestlessDreams","food","Food","FoodNightfinSoup","mainHandImbue","WeaponImbue","LesserWizardOil","mildlyIrradiatedRejuvPot","shadowPowerBuff","ShadowPowerBuff","ElixirOfShadowPower","spellPowerBuff","SpellPowerBuff","ArcaneElixir","zanzaBuff","ZanzaBuff","AtalaiMojoOfForbiddenMagic","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","manaSpringTotem","moonkinAura","powerWordFortitude","DefaultIndividualBuffs","IndividualBuffs","fervorOfTheTempleExplorer","saygesFortune","SaygesFortune","SaygesDamage","songflowerSerenade","DefaultDebuffs","Debuffs","curseOfShadowNew","TristateEffectRegular","improvedShadowBolt","OtherDefaults","channelClipDelay","profession1","Profession","Alchemy","profession2","Enchanting","SPEC_CONFIG","registerSpecConfig","Spec","SpecShadowPriest","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellDamage","StatShadowPower","StatHolyPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatSpellPenetration","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","player","stats","Stats","addStat","getTalents","shadowFocus","Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE","talents","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","ShadowPriestInputs.ArmorInput","includeBuffDebuffInputs","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.StaminaBuff","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","OtherInputs.ChannelClipDelay","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassPriest","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceDwarf","Horde","RaceUndead","defaultGear","ShadowPriestSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}