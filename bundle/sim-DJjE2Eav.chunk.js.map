{"version":3,"file":"sim-DJjE2Eav.chunk.js","sources":["../../../ui/feral_druid/inputs.ts","../../../ui/feral_druid/presets.ts","../../../ui/feral_druid/sim.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers.js';\nimport { Spec } from '../core/proto/common.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const LatencyMs = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecFeralDruid>({\n\tfieldName: 'latencyMs',\n\tlabel: 'Latency',\n\tlabelTooltip: 'Player latency, in milliseconds. Adds a delay to actions that cannot be spell queued.',\n});\n\nexport const AssumeBleedActive = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecFeralDruid>({\n\tfieldName: 'assumeBleedActive',\n\tlabel: 'Assume Bleed Always Active',\n\tlabelTooltip: \"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.\",\n\textraCssClasses: ['within-raid-sim-hide'],\n});\n\nexport const FeralDruidRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'minCombosForRip',\n\t\t\tlabel: 'Min Rip CP',\n\t\t\tlabelTooltip: 'Combo Point threshold for allowing a Rip cast',\n\t\t\tfloat: false,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maxWaitTime',\n\t\t\tlabel: 'Max Wait Time',\n\t\t\tlabelTooltip: 'Max seconds to wait for an Energy tick to cast rather than powershifting',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationNumberInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'preroarDuration',\n\t\t\tlabel: 'Pre-Roar Duration',\n\t\t\tlabelTooltip: 'Seconds remaining on a prior Savage Roar buff at the start of the pull',\n\t\t\tfloat: true,\n\t\t\tpositive: true,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'maintainFaerieFire',\n\t\t\tlabel: 'Maintain Faerie Fire',\n\t\t\tlabelTooltip: 'If checked, bundle Faerie Fire refreshes with powershifts. Ignored if an external Faerie Fire debuff is selected in settings.',\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'precastTigersFury',\n\t\t\tlabel: `Pre-cast Tiger's Fury`,\n\t\t\tlabelTooltip: `If checked, model a pre-pull Tiger's Fury cast 3 seconds before initiating combat.`,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecFeralDruid>({\n\t\t\tfieldName: 'useShredTrick',\n\t\t\tlabel: `Use Shred Trick`,\n\t\t\tlabelTooltip: `If checked, enable the \"Shred trick\" micro-optimization. This should only be used on short fight lengths with full powershifting uptime.`,\n\t\t}),\n\t],\n};\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tAgilityElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tSpec,\n\tStrengthBuff,\n\tTristateEffect,\n\tWeaponImbue,\n\tZanzaBuff,\n} from '../core/proto/common.js';\nimport { FeralDruid_Options as FeralDruidOptions, FeralDruid_Rotation as FeralDruidRotation } from '../core/proto/druid.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\nimport Phase3APL from './apls/phase_3.apl.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\nimport Phase3Gear from './gear_sets/phase_3.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\nexport const GearPhase3 = PresetUtils.makePresetGear('Phase 3', Phase3Gear);\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearPhase1],\n\t[Phase.Phase2]: [GearPhase2],\n\t[Phase.Phase3]: [GearPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultGear = GearPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\nexport const APLPhase3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3APL);\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLPhase1],\n\t[Phase.Phase2]: [APLPhase2],\n\t[Phase.Phase3]: [APLPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Add Phase 2 preset an pull from map\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n\t25: APLPresets[Phase.Phase1][0],\n\t40: APLPresets[Phase.Phase2][0],\n\t50: APLPresets[Phase.Phase3][0],\n};\n\nexport const DefaultRotation = FeralDruidRotation.create({\n\tmaintainFaerieFire: false,\n\tminCombosForRip: 3,\n\tmaxWaitTime: 2.0,\n\tpreroarDuration: 26.0,\n\tprecastTigersFury: false,\n\tuseShredTrick: false,\n});\n\nexport const SIMPLE_ROTATION_DEFAULT = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecFeralDruid, DefaultRotation);\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '500005001--05',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-550002032320211-05',\n\t}),\n};\n\nexport const TalentsPhase3 = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '500005301-5500020323002-05',\n\t}),\n};\nexport const TalentsPhase3LoTP = {\n\tname: 'Phase 3 LoTP',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5500020323202151-55',\n\t}),\n};\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [TalentsPhase1],\n\t[Phase.Phase2]: [TalentsPhase2],\n\t[Phase.Phase3]: [TalentsPhase3, TalentsPhase3LoTP],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultTalents = TalentPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = FeralDruidOptions.create({\n\tlatencyMs: 100,\n\tassumeBleedActive: true,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfTheMongoose,\n\tdefaultPotion: Potions.MajorManaPotion,\n\tdragonBreathChili: true,\n\tenchantedSigil: EnchantedSigil.LivingDreamsSigil,\n\tfood: Food.FoodSagefishDelight,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\tmiscConsumes: {\n\t\tcatnip: true,\n\t},\n\tstrengthBuff: StrengthBuff.ElixirOfGiants,\n\tzanzaBuff: ZanzaBuff.AtalaiMojoOfWar,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tgraceOfAirTotem: TristateEffect.TristateEffectImproved,\n\tmanaSpringTotem: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tfervorOfTheTempleExplorer: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n\tsongflowerSerenade: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfRecklessness: true,\n\tfaerieFire: true,\n\thomunculi: 70, // 70% average uptime default\n\tsunderArmor: true,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Enchanting,\n\tprofession2: Profession.Leatherworking,\n};\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { APLRotation_Type as APLRotationType } from '../core/proto/apl.js';\nimport { Class, Faction, ItemSlot, PartyBuffs, Race, Spec, Stat, WeaponImbue } from '../core/proto/common.js';\nimport { Gear } from '../core/proto_utils/gear.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport { TypedEvent } from '../core/typed_event.js';\nimport * as DruidInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecFeralDruid, {\n\tcssClass: 'feral-druid-sim-ui',\n\tcssScheme: 'druid',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\twarnings: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatFeralAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMana,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatMP5,\n\t],\n\tepPseudoStats: [],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatFeralAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatMana,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatStrength]: 2.38,\n\t\t\t\t[Stat.StatAgility]: 2.35,\n\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t[Stat.StatFeralAttackPower]: 1,\n\t\t\t\t[Stat.StatMeleeHit]: 24.46,\n\t\t\t\t[Stat.StatMeleeCrit]: 16.67,\n\t\t\t\t[Stat.StatMeleeHaste]: 10.9,\n\t\t\t\t[Stat.StatMana]: 0.04,\n\t\t\t\t[Stat.StatIntellect]: 0.67,\n\t\t\t\t[Stat.StatSpirit]: 0.08,\n\t\t\t\t[Stat.StatMP5]: 0.46,\n\t\t\t},\n\t\t\t{},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default rotation settings.\n\t\trotationType: APLRotationType.TypeSimple,\n\t\tsimpleRotation: Presets.DefaultRotation,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [],\n\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: DruidInputs.FeralDruidRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.IntellectBuff,\n\t\tBuffDebuffInputs.BlessingOfWisdom,\n\t\tBuffDebuffInputs.ManaSpringTotem,\n\t\tBuffDebuffInputs.JudgementOfWisdom,\n\t],\n\texcludeBuffDebuffInputs: [WeaponImbue.ElementalSharpeningStone, WeaponImbue.DenseSharpeningStone, WeaponImbue.WildStrikes],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.ReactionTime,\n\t\t\t// DruidInputs.AssumeBleedActive,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\t// itemSwapConfig: {\n\t// \titemSlots: [ItemSlot.ItemSlotMainHand],\n\t// },\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [...Presets.TalentPresets[Phase.Phase3], ...Presets.TalentPresets[Phase.Phase2], ...Presets.TalentPresets[Phase.Phase1]],\n\t\trotations: [\n\t\t\t// Simple Rotation is broken at the moment\n\t\t\t// Presets.SIMPLE_ROTATION_DEFAULT,\n\t\t\t...Presets.APLPresets[Phase.Phase3],\n\t\t\t...Presets.APLPresets[Phase.Phase2],\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [...Presets.GearPresets[Phase.Phase3], ...Presets.GearPresets[Phase.Phase2], ...Presets.GearPresets[Phase.Phase1]],\n\t},\n\n\tautoRotation: player => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\t// simpleRotation: (player: Player<Spec.SpecFeralDruid>, simple: DruidRotation, cooldowns: Cooldowns): APLRotation => {\n\t// \tconst [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t// \tconst preroarDuration = Math.min(simple.preroarDuration, 33.0);\n\t// \tconst preRoar = APLPrepullAction.fromJsonString(\n\t// \t\t`{\"action\":{\"activateAura\":{\"auraId\":{\"spellId\":407988}}},\"doAtValue\":{\"const\":{\"val\":\"-${(34.0 - preroarDuration).toFixed(2)}s\"}}}`,\n\t// \t);\n\t// \tconst preTF = APLPrepullAction.fromJsonString(`{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":5217,\"rank\":1}}},\"doAtValue\":{\"const\":{\"val\":\"-3s\"}}}`);\n\t// \tconst doRotation = APLAction.fromJsonString(\n\t// \t\t`{\"catOptimalRotationAction\":{\"maxWaitTime\":${simple.maxWaitTime.toFixed(2)},\"minCombosForRip\":${simple.minCombosForRip.toFixed(0)},\"maintainFaerieFire\":${simple.maintainFaerieFire},\"useShredTrick\":${simple.useShredTrick}}}`,\n\t// \t);\n\n\t// \tprepullActions.push(...([preroarDuration > 0 ? preRoar : null, simple.precastTigersFury ? preTF : null].filter(a => a) as Array<APLPrepullAction>));\n\n\t// \tactions.push(...([doRotation].filter(a => a) as Array<APLAction>));\n\n\t// \treturn APLRotation.create({\n\t// \t\tprepullActions: prepullActions,\n\t// \t\tpriorityList: actions.map(action =>\n\t// \t\t\tAPLListItem.create({\n\t// \t\t\t\taction: action,\n\t// \t\t\t}),\n\t// \t\t),\n\t// \t});\n\t// },\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecFeralDruid,\n\t\t\ttooltip: specNames[Spec.SpecFeralDruid],\n\t\t\tdefaultName: 'Cat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 3),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class FeralDruidSimUI extends IndividualSimUI<Spec.SpecFeralDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecFeralDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n\n\tcalcArpTarget(gear: Gear): number {\n\t\tlet arpTarget = 1399;\n\n\t\t// First handle ArP proc trinkets\n\t\tif (gear.hasTrinket(45931)) {\n\t\t\tarpTarget -= 751;\n\t\t} else if (gear.hasTrinket(40256)) {\n\t\t\tarpTarget -= 612;\n\t\t}\n\n\t\t// Then check for Executioner enchant\n\t\tconst weapon = gear.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\n\t\tif (weapon != null && weapon!.enchant != null && weapon!.enchant!.effectId == 3225) {\n\t\t\tarpTarget -= 120;\n\t\t}\n\n\t\treturn arpTarget;\n\t}\n\n\tcalcCritCap(gear: Gear): Stats {\n\t\tconst baseCritCapPercentage = 77.8; // includes 3% Crit debuff\n\t\tlet agiProcs = 0;\n\n\t\tif (gear.hasRelic(47668)) {\n\t\t\tagiProcs += 200;\n\t\t}\n\n\t\tif (gear.hasRelic(50456)) {\n\t\t\tagiProcs += 44 * 5;\n\t\t}\n\n\t\tif (gear.hasTrinket(47131) || gear.hasTrinket(47464)) {\n\t\t\tagiProcs += 510;\n\t\t}\n\n\t\tif (gear.hasTrinket(47115) || gear.hasTrinket(47303)) {\n\t\t\tagiProcs += 450;\n\t\t}\n\n\t\tif (gear.hasTrinket(44253) || gear.hasTrinket(42987)) {\n\t\t\tagiProcs += 300;\n\t\t}\n\n\t\treturn new Stats().withStat(Stat.StatMeleeCrit, (baseCritCapPercentage - (agiProcs * 1.1 * 1.06 * 1.02) / 83.33) * 45.91);\n\t}\n\n\tasync updateGear(gear: Gear): Promise<Stats> {\n\t\tthis.player.setGear(TypedEvent.nextEventID(), gear);\n\t\tawait this.sim.updateCharacterStats(TypedEvent.nextEventID());\n\t\treturn Stats.fromProto(this.player.getCurrentStats().finalStats);\n\t}\n\n\tdetectArpStackConfiguration(arpTarget: number): boolean {\n\t\tconst currentArp = Stats.fromProto(this.player.getCurrentStats().finalStats).getStat(Stat.StatArmorPenetration);\n\t\treturn arpTarget > 1000 && currentArp > 648 && currentArp + 20 < arpTarget + 11;\n\t}\n}\n"],"names":["InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","InputHelpers.makeSpecOptionsBooleanInput","extraCssClasses","FeralDruidRotationConfig","inputs","InputHelpers.makeRotationNumberInput","float","positive","InputHelpers.makeRotationBooleanInput","GearPhase1","PresetUtils.makePresetGear","GearPhase2","Phase2Gear","GearPhase3","Phase3Gear","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase2","Phase2APL","APLPhase3","Phase3APL","APLPresets","DefaultAPLs","DefaultRotation","FeralDruidRotation","create","maintainFaerieFire","minCombosForRip","maxWaitTime","preroarDuration","precastTigersFury","useShredTrick","PresetUtils.makePresetSimpleRotation","Spec","SpecFeralDruid","TalentsPhase1","name","data","SavedTalents","talentsString","TalentsPhase2","TalentsPhase3","TalentsPhase3LoTP","TalentPresets","DefaultTalents","DefaultOptions","FeralDruidOptions","latencyMs","assumeBleedActive","DefaultConsumes","Consumes","agilityElixir","AgilityElixir","ElixirOfTheMongoose","defaultPotion","Potions","MajorManaPotion","dragonBreathChili","enchantedSigil","EnchantedSigil","LivingDreamsSigil","food","Food","FoodSagefishDelight","mainHandImbue","WeaponImbue","WildStrikes","miscConsumes","catnip","strengthBuff","StrengthBuff","ElixirOfGiants","zanzaBuff","ZanzaBuff","AtalaiMojoOfWar","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","battleShout","TristateEffect","TristateEffectImproved","divineSpirit","giftOfTheWild","graceOfAirTotem","manaSpringTotem","strengthOfEarthTotem","DefaultIndividualBuffs","IndividualBuffs","fervorOfTheTempleExplorer","saygesFortune","SaygesFortune","SaygesDamage","songflowerSerenade","DefaultDebuffs","Debuffs","curseOfRecklessness","faerieFire","homunculi","sunderArmor","OtherDefaults","profession1","Profession","Enchanting","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStrength","StatAgility","StatAttackPower","StatFeralAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatMana","StatIntellect","StatSpirit","StatMP5","epPseudoStats","epReferenceStat","displayStats","StatHealth","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","rotationType","APLRotationType","TypeSimple","simpleRotation","Presets.DefaultRotation","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","rotationInputs","DruidInputs.FeralDruidRotationConfig","includeBuffDebuffInputs","BuffDebuffInputs.IntellectBuff","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.JudgementOfWisdom","excludeBuffDebuffInputs","ElementalSharpeningStone","DenseSharpeningStone","otherInputs","OtherInputs.ReactionTime","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","player","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","FeralDruidSimUI","IndividualSimUI","constructor","parentElem","super","calcArpTarget","arpTarget","hasTrinket","weapon","getEquippedItem","ItemSlot","ItemSlotMainHand","enchant","effectId","calcCritCap","agiProcs","hasRelic","withStat","updateGear","this","setGear","TypedEvent","nextEventID","sim","updateCharacterStats","fromProto","getCurrentStats","finalStats","detectArpStackConfiguration","currentArp","getStat","StatArmorPenetration"],"mappings":"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"}