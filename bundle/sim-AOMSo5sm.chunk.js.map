{"version":3,"file":"sim-AOMSo5sm.chunk.js","sources":["../../../ui/hunter/inputs.ts","../../../ui/core/talents/hunter_pet.ts","../../../ui/hunter/presets.ts","../../../ui/hunter/sim.ts"],"sourcesContent":["import { ItemSlot, Spec } from '../core/proto/common.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { Player } from '../core/player.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { makePetTypeInputConfig } from '../core/talents/hunter_pet.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\nimport {\n\tHunter_Rotation_RotationType as RotationType,\n\tHunter_Rotation_StingType as StingType,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_QuiverBonus as QuiverBonus,\n\tHunter_Options_PetType,\n\tHunter_Options_PetAttackSpeed as PetAttackSpeed,\n\tHunterRune,\n\tHunter,\n} from '../core/proto/hunter.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const WeaponAmmo = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, Ammo>({\n\tfieldName: 'ammo',\n\tnumColumns: 6,\n\tvalues: [\n\t\t{ value: Ammo.AmmoNone, tooltip: 'No Ammo' },\n\t\t{ actionId: () => ActionId.fromItemId(3030), value: Ammo.RazorArrow },\n\t\t{ actionId: () => ActionId.fromItemId(11285), value: Ammo.JaggedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(19316), value: Ammo.IceThreadedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(18042), value: Ammo.ThoriumHeadedArrow },\n\t\t{ actionId: () => ActionId.fromItemId(12654), value: Ammo.Doomshot },\n\t\t{ actionId: () => ActionId.fromItemId(3033), value: Ammo.SolidShot },\n\t\t{ actionId: () => ActionId.fromItemId(11284), value: Ammo.AccurateSlugs },\n\t\t{ actionId: () => ActionId.fromItemId(19317), value: Ammo.IceThreadedBullet },\n\t\t{ actionId: () => ActionId.fromItemId(10513), value: Ammo.MithrilGyroShot },\n\t\t{ actionId: () => ActionId.fromItemId(11630), value: Ammo.RockshardPellets },\n\t\t{ actionId: () => ActionId.fromItemId(15997), value: Ammo.ThoriumShells },\n\t\t{ actionId: () => ActionId.fromItemId(13377), value: Ammo.MiniatureCannonBalls },\n\t],\n});\n\nexport const QuiverInput = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, QuiverBonus>({\n\textraCssClasses: [\n\t\t'quiver-picker',\n\t],\n\tfieldName: 'quiverBonus',\n\tnumColumns: 2,\n\tvalues: [\n\t\t{ color: '82e89d', value: QuiverBonus.QuiverNone },\n\t\t{ actionId: () => ActionId.fromItemId(18714), value: QuiverBonus.Speed15 },\n\t\t{ actionId: () => ActionId.fromItemId(2662), value: QuiverBonus.Speed14 },\n\t\t{ actionId: () => ActionId.fromItemId(8217), value: QuiverBonus.Speed13 },\n\t\t{ actionId: () => ActionId.fromItemId(7371), value: QuiverBonus.Speed12 },\n\t\t{ actionId: () => ActionId.fromItemId(3605), value: QuiverBonus.Speed11 },\n\t\t{ actionId: () => ActionId.fromItemId(3573), value: QuiverBonus.Speed10 },\n\t],\n});\n\nexport const PetTypeInput = makePetTypeInputConfig(true);\n\nexport const PetUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'petUptime',\n\tlabel: 'Pet Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which your pet will be alive.',\n\tpercent: true,\n});\n\nexport const NewRaptorStrike = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecHunter>({\n\tfieldName: 'newRaptorStrike',\n\tlabel: 'New Raptor Strike',\n\tlabelTooltip: 'New Raptor Strike with removed same weapon type 30% damage bonus.',\n\tshowWhen: (player) => player.getEquippedItem(ItemSlot.ItemSlotFeet)?.rune?.id == HunterRune.RuneBootsDualWieldSpecialization,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.gearChangeEmitter, player.specOptionsChangeEmitter]),\n});\n\nexport const SniperTrainingUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecHunter>({\n\tfieldName: 'sniperTrainingUptime',\n\tlabel: 'Sniper Training Uptime (%)',\n\tlabelTooltip: 'Percent of the fight duration for which you will have the buff.',\n\tpercent: true,\n\tshowWhen: (player) => player.getEquippedItem(ItemSlot.ItemSlotLegs)?.rune?.id == HunterRune.RuneLegsSniperTraining,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.gearChangeEmitter, player.specOptionsChangeEmitter]),\n});\n\nexport const PetAttackSpeedInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecHunter>({\n\tfieldName: 'petAttackSpeed',\n\tlabel: 'Pet Attack Speed',\n\tlabelTooltip: 'The pets auto attacks speed.',\n\tvalues: [\n\t\t{ name: '1.0', value: PetAttackSpeed.One },\n\t\t{ name: '1.2', value: PetAttackSpeed.OneTwo },\n\t\t{ name: '1.3', value: PetAttackSpeed.OneThree },\n\t\t{ name: '1.4', value: PetAttackSpeed.OneFour },\n\t\t{ name: '1.5', value: PetAttackSpeed.OneFive },\n\t\t{ name: '1.6', value: PetAttackSpeed.OneSix },\n\t\t{ name: '1.7', value: PetAttackSpeed.OneSeven },\n\t\t{ name: '2.0', value: PetAttackSpeed.Two },\n\t\t{ name: '2.4', value: PetAttackSpeed.TwoFour },\n\t\t{ name: '2.5', value: PetAttackSpeed.TwoFive },\n\t],\n\tshowWhen: (player) => player.getSpecOptions().petType != Hunter_Options_PetType.PetNone,\n\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.specOptionsChangeEmitter]),\n});\n\nexport const HunterRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'type',\n\t\t\tlabel: 'Type',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Single Target', value: RotationType.SingleTarget },\n\t\t\t\t{ name: 'AOE', value: RotationType.Aoe },\n\t\t\t],\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'sting',\n\t\t\tlabel: 'Sting',\n\t\t\tlabelTooltip: 'Maintains the selected Sting on the primary target.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'None', value: StingType.NoSting },\n\t\t\t\t{ name: 'Scorpid Sting', value: StingType.ScorpidSting },\n\t\t\t\t{ name: 'Serpent Sting', value: StingType.SerpentSting },\n\t\t\t],\n\t\t\tshowWhen: (player: Player<Spec.SpecHunter>) => player.getSimpleRotation().type == RotationType.SingleTarget,\n\t\t}),\n\t\tInputHelpers.makeRotationBooleanInput<Spec.SpecHunter>({\n\t\t\tfieldName: 'multiDotSerpentSting',\n\t\t\tlabel: 'Multi-Dot Serpent Sting',\n\t\t\tlabelTooltip: 'Casts Serpent Sting on multiple targets',\n\t\t\tchangeEmitter: (player: Player<Spec.SpecHunter>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import { Player } from '../player.js';\nimport { Spec } from '../proto/common.js';\nimport { Hunter_Options_PetType as PetType } from '../proto/hunter.js';\nimport { ActionId } from '../proto_utils/action_id.js';\n\n\nimport * as InputHelpers from '../components/input_helpers.js';\n\nexport function makePetTypeInputConfig(_: boolean): InputHelpers.TypedIconEnumPickerConfig<Player<Spec.SpecHunter>, PetType> {\n\treturn InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecHunter, PetType>({\n\t\tfieldName: 'petType',\n\t\tnumColumns: 6,\n\t\t//label: includeLabel ? 'Pet' : '',\n\t\tvalues: [\n\t\t\t// TODO: Organize pets into phases maybe?\n\t\t\t{ value: PetType.PetNone, tooltip: 'No Pet' },\n\t\t\t{ actionId: () => ActionId.fromPetName('Cat'), tooltip: 'Cat', value: PetType.Cat },\n\t\t\t{ actionId: () => ActionId.fromPetName('Wind Serpent'), tooltip: 'Wind Serpent', value: PetType.WindSerpent },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Wolf'), tooltip: 'Wolf', value: PetType.Wolf },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bat'), tooltip: 'Bat', value: PetType.Bat },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bear'), tooltip: 'Bear', value: PetType.Bear },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Bird of Prey'), tooltip: 'Bird of Prey', value: PetType.BirdOfPrey },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Boar'), tooltip: 'Boar', value: PetType.Boar },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Carrion Bird'), tooltip: 'Carrion Bird', value: PetType.CarrionBird },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Chimaera'), tooltip: 'Chimaera (Exotic)', value: PetType.Chimaera },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Core Hound'), tooltip: 'Core Hound (Exotic)', value: PetType.CoreHound },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Crab'), tooltip: 'Crab', value: PetType.Crab },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Crocolisk'), tooltip: 'Crocolisk', value: PetType.Crocolisk },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Devilsaur'), tooltip: 'Devilsaur (Exotic)', value: PetType.Devilsaur },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Dragonhawk'), tooltip: 'Dragonhawk', value: PetType.Dragonhawk },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Gorilla'), tooltip: 'Gorilla', value: PetType.Gorilla },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Hyena'), tooltip: 'Hyena', value: PetType.Hyena },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Raptor'), tooltip: 'Raptor', value: PetType.Raptor },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Scorpid'), tooltip: 'Scorpid', value: PetType.Scorpid },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Serpent'), tooltip: 'Serpent', value: PetType.Serpent },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Silithid'), tooltip: 'Silithid (Exotic)', value: PetType.Silithid },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spider'), tooltip: 'Spider', value: PetType.Spider },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spirit Beast'), tooltip: 'Spirit Beast (Exotic)', value: PetType.SpiritBeast },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Spore Bat'), tooltip: 'Spore Bat', value: PetType.SporeBat },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Tallstrider'), tooltip: 'Tallstrider', value: PetType.Tallstrider },\n\t\t\t//{ actionId: () => ActionId.fromPetName('Turtle'), tooltip: 'Turtle', value: PetType.Turtle },\n\t\t],\n\t});\n}\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tAgilityElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tSpellPowerBuff,\n\tStrengthBuff,\n\tTristateEffect,\n\tWeaponImbue,\n} from '../core/proto/common.js';\nimport {\n\tHunter_Options as HunterOptions,\n\tHunter_Options_Ammo as Ammo,\n\tHunter_Options_PetType as PetType,\n\tHunter_Options_QuiverBonus,\n} from '../core/proto/hunter.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport MeleeWeaveP1 from './apls/p1_weave.apl.json';\nimport MeleeP2 from './apls/p2_melee.apl.json';\nimport RangedBmP2 from './apls/p2_ranged_bm.apl.json';\nimport RangedMmP2 from './apls/p2_ranged_mm.apl.json';\nimport MeleeBmP3 from './apls/p3_melee_bm.apl.json';\nimport RangedMmP3 from './apls/p3_ranged_mm.apl.json';\nimport Phase2GearMelee from './gear_sets/p2_melee.gear.json';\nimport Phase2GearRangedBm from './gear_sets/p2_ranged_bm.gear.json';\nimport Phase2GearRangedMm from './gear_sets/p2_ranged_mm.gear.json';\nimport Phase3GearMeleeBm from './gear_sets/p3_melee_bm.gear.json';\nimport Phase3GearRangedMm from './gear_sets/p3_ranged_mm.gear.json';\nimport Phase1Gear from './gear_sets/phase1.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearBeastMasteryPhase1 = PresetUtils.makePresetGear('P1 Beast Mastery', Phase1Gear, { customCondition: player => player.getLevel() == 25 });\nexport const GearMarksmanPhase1 = PresetUtils.makePresetGear('P1 Marksmanship', Phase1Gear, { customCondition: player => player.getLevel() == 25 });\nexport const GearSurvivalPhase1 = PresetUtils.makePresetGear('P1 Survival', Phase1Gear, { customCondition: player => player.getLevel() == 25 });\n\nexport const GearRangedBmPhase2 = PresetUtils.makePresetGear('P2 Ranged BM', Phase2GearRangedBm, { customCondition: player => player.getLevel() == 40 });\nexport const GearRangedMmPhase2 = PresetUtils.makePresetGear('P2 Ranged MM', Phase2GearRangedMm, { customCondition: player => player.getLevel() == 40 });\nexport const GearMeleePhase2 = PresetUtils.makePresetGear('P2 Melee', Phase2GearMelee, { customCondition: player => player.getLevel() == 40 });\n\nexport const GearMeleeBmPhase3 = PresetUtils.makePresetGear('P3 Melee BM', Phase3GearMeleeBm, { customCondition: player => player.getLevel() == 50 });\nexport const GearRangedMmPhase3 = PresetUtils.makePresetGear('P3 Ranged MM', Phase3GearRangedMm, { customCondition: player => player.getLevel() == 50 });\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearBeastMasteryPhase1, GearMarksmanPhase1, GearSurvivalPhase1],\n\t[Phase.Phase2]: [GearRangedBmPhase2, GearRangedMmPhase2, GearMeleePhase2],\n\t[Phase.Phase3]: [GearRangedMmPhase3, GearMeleeBmPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultGear = GearMeleeBmPhase3;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLMeleeWeavePhase1 = PresetUtils.makePresetAPLRotation('P1 Melee Weave', MeleeWeaveP1, { customCondition: player => player.getLevel() == 25 });\n\nexport const APLMeleePhase2 = PresetUtils.makePresetAPLRotation('P2 Melee', MeleeP2, { customCondition: player => player.getLevel() == 40 });\nexport const APLRangedBmPhase2 = PresetUtils.makePresetAPLRotation('P2 Ranged BM', RangedBmP2, { customCondition: player => player.getLevel() == 40 });\nexport const APLRangedMmPhase2 = PresetUtils.makePresetAPLRotation('P2 Ranged MM', RangedMmP2, { customCondition: player => player.getLevel() == 40 });\n\nexport const APLMeleeBmPhase3 = PresetUtils.makePresetAPLRotation('P3 Melee BM', MeleeBmP3, { customCondition: player => player.getLevel() == 50 });\nexport const APLRangedMmPhase3 = PresetUtils.makePresetAPLRotation('P3 Ranged MM', RangedMmP3, { customCondition: player => player.getLevel() == 50 });\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLMeleeWeavePhase1],\n\t[Phase.Phase2]: [APLRangedBmPhase2, APLRangedMmPhase2, APLMeleePhase2],\n\t[Phase.Phase3]: [APLRangedMmPhase3, APLMeleeBmPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsBeastMasteryPhase1 = PresetUtils.makePresetTalents('P1 Beast Mastery', SavedTalents.create({ talentsString: '53000200501' }), {\n\tcustomCondition: player => player.getLevel() == 25,\n});\n\nexport const TalentsMarksmanPhase1 = PresetUtils.makePresetTalents('P1 Marksmanship', SavedTalents.create({ talentsString: '-050515' }), {\n\tcustomCondition: player => player.getLevel() == 25,\n});\n\nexport const TalentsSurvivalPhase1 = PresetUtils.makePresetTalents('P1 Survival', SavedTalents.create({ talentsString: '--33502001101' }), {\n\tcustomCondition: player => player.getLevel() == 25,\n});\n\nexport const TalentsBeastMasteryPhase2 = PresetUtils.makePresetTalents('P2 Beast Mastery', SavedTalents.create({ talentsString: '5300021150501251' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const TalentsMarksmanPhase2 = PresetUtils.makePresetTalents('P2 Marksmanship', SavedTalents.create({ talentsString: '-05551001503051' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const TalentsSurvivalPhase2 = PresetUtils.makePresetTalents('P2 Survival', SavedTalents.create({ talentsString: '--335020051030315' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const TalentsRangedMMPhase3 = PresetUtils.makePresetTalents('P3 Ranged MM', SavedTalents.create({ talentsString: '5-05051404503051-3' }), {\n\tcustomCondition: player => player.getLevel() == 50,\n});\nexport const TalentsMeleeBMPhase3 = PresetUtils.makePresetTalents('P3 Melee BM', SavedTalents.create({ talentsString: '0500321150521251--33002' }), {\n\tcustomCondition: player => player.getLevel() == 50,\n});\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [TalentsBeastMasteryPhase1, TalentsMarksmanPhase1, TalentsSurvivalPhase1],\n\t[Phase.Phase2]: [TalentsBeastMasteryPhase2, TalentsMarksmanPhase2, TalentsSurvivalPhase2],\n\t[Phase.Phase3]: [TalentsRangedMMPhase3, TalentsMeleeBMPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultTalents = TalentsMeleeBMPhase3;\n\nexport const PresetBuildMeleeBM = PresetUtils.makePresetBuild('Melee BM', GearMeleeBmPhase3, TalentsMeleeBMPhase3, APLMeleeBmPhase3);\nexport const PresetBuildRangedMM = PresetUtils.makePresetBuild('Ranged MM', GearRangedMmPhase3, TalentsRangedMMPhase3, APLRangedMmPhase3);\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = HunterOptions.create({\n\tammo: Ammo.JaggedArrow,\n\tpetType: PetType.WindSerpent,\n\tpetTalents: {},\n\tpetUptime: 1,\n\tquiverBonus: Hunter_Options_QuiverBonus.Speed14,\n\tpetAttackSpeed: 2.0,\n});\n\nexport const BMDefaultOptions = HunterOptions.create({\n\tammo: Ammo.JaggedArrow,\n\tpetType: PetType.Cat,\n\tpetTalents: {},\n\tpetUptime: 1,\n\tquiverBonus: Hunter_Options_QuiverBonus.Speed14,\n\tpetAttackSpeed: 2.0,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfAgility,\n\tdefaultPotion: Potions.GreaterManaPotion,\n\tdragonBreathChili: true,\n\tenchantedSigil: EnchantedSigil.InnovationSigil,\n\tfood: Food.FoodSagefishDelight,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.SolidWeightstone,\n\tspellPowerBuff: SpellPowerBuff.LesserArcaneElixir,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tbattleShout: TristateEffect.TristateEffectRegular,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfMight: TristateEffect.TristateEffectRegular,\n\tblessingOfWisdom: TristateEffect.TristateEffectRegular,\n\tsparkOfInspiration: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfRecklessness: true,\n\tdreamstate: true,\n\tfaerieFire: true,\n\thomunculi: 100, // 70% average uptime default\n\tmangle: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 15,\n\tprofession1: Profession.Enchanting,\n\tprofession2: Profession.Leatherworking,\n};\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as ConsumablesInputs from '../core/components/inputs/consumables.js';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport * as Mechanics from '../core/constants/mechanics.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { ItemSlot, PartyBuffs, PseudoStat, Spec, Stat } from '../core/proto/common.js';\nimport { HunterRune } from '../core/proto/hunter.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport * as HunterInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecHunter, {\n\tcssClass: 'hunter-sim-ui',\n\tcssScheme: 'hunter',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\twarnings: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatNaturePower,\n\t\tStat.StatArcanePower,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps, PseudoStat.PseudoStatRangedDps],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatRangedAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatRangedAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatMP5,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatNaturePower,\n\t],\n\tmodifyDisplayStats: (player: Player<Spec.SpecHunter>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatMeleeCrit, player.getTalents().lethalShots * 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\t// const rangedWeapon = player.getEquippedItem(ItemSlot.ItemSlotRanged);\n\t\t// if (rangedWeapon?.enchant?.effectId == 3608) {\n\t\t// \tstats = stats.addStat(Stat.StatMeleeCrit, 40);\n\t\t// }\n\t\t// if (player.getRace() == Race.RaceDwarf && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeGun) {\n\t\t// \tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t// }\n\t\t// if (player.getRace() == Race.RaceTroll && rangedWeapon?.item.rangedWeaponType == RangedWeaponType.RangedWeaponTypeBow) {\n\t\t// \tstats = stats.addStat(Stat.StatMeleeCrit, 1 * Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE);\n\t\t// }\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatStrength]: 0.3,\n\t\t\t\t[Stat.StatAgility]: 0.64,\n\t\t\t\t[Stat.StatStamina]: 0.0,\n\t\t\t\t[Stat.StatIntellect]: 0.02,\n\t\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t\t[Stat.StatRangedAttackPower]: 1.0,\n\t\t\t\t[Stat.StatMeleeHit]: 3.29,\n\t\t\t\t[Stat.StatMeleeCrit]: 4.45,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.08,\n\t\t\t\t[Stat.StatArmorPenetration]: 1.32,\n\t\t\t\t[Stat.StatSpellPower]: 0.03,\n\t\t\t\t[Stat.StatNaturePower]: 0.01,\n\t\t\t\t[Stat.StatArcanePower]: 0.01,\n\t\t\t\t[Stat.StatMP5]: 0.05,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.11,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 1.39,\n\t\t\t\t[PseudoStat.PseudoStatRangedDps]: 6.32,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [HunterInputs.PetTypeInput, HunterInputs.WeaponAmmo, HunterInputs.QuiverInput],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: HunterInputs.HunterRotationConfig,\n\tpetConsumeInputs: [ConsumablesInputs.PetScrollOfAgility, ConsumablesInputs.PetScrollOfStrength],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.SpellScorchDebuff, BuffDebuffInputs.StaminaBuff],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\t//HunterInputs.NewRaptorStrike,\n\t\t\tHunterInputs.PetAttackSpeedInput,\n\t\t\tHunterInputs.PetUptime,\n\t\t\tHunterInputs.SniperTrainingUptime,\n\t\t\tOtherInputs.DistanceFromTarget,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase3], \n\t\t\t...Presets.TalentPresets[Phase.Phase2], \n\t\t\t...Presets.TalentPresets[Phase.Phase1]\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase3], \n\t\t\t...Presets.APLPresets[Phase.Phase2], \n\t\t\t...Presets.APLPresets[Phase.Phase1]\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase3], \n\t\t\t...Presets.GearPresets[Phase.Phase2], \n\t\t\t...Presets.GearPresets[Phase.Phase1]\n\t\t],\n\t\tbuilds: [\n\t\t\tPresets.PresetBuildMeleeBM, \n\t\t\tPresets.PresetBuildRangedMM\n\t\t],\n\t},\n\n\tautoRotation: player => {\n\t\tconst isMelee =\n\t\t\tplayer.getEquippedItem(ItemSlot.ItemSlotWaist)?.rune?.id == HunterRune.RuneBeltMeleeSpecialist &&\n\t\t\tplayer.getEquippedItem(ItemSlot.ItemSlotFeet)?.rune?.id == HunterRune.RuneBootsDualWieldSpecialization;\n\n\t\tif (isMelee) {\n\t\t\treturn player.getLevel() == 50 ? Presets.APLMeleeBmPhase3.rotation.rotation! : player.getLevel() == 40 ? Presets.APLMeleePhase2.rotation.rotation! : Presets.APLMeleeWeavePhase1.rotation.rotation!;\n\t\t} else {\n\t\t\tif (player.getLevel() == 50) {\n\t\t\t\treturn Presets.APLRangedMmPhase3.rotation.rotation!;\n\t\t\t} else if (player.getLevel() == 40) {\n\t\t\t\tif (player.getTalentTree() == 1) {\n\t\t\t\t\treturn Presets.APLRangedMmPhase2.rotation.rotation!;\n\t\t\t\t} else {\n\t\t\t\t\treturn Presets.APLRangedBmPhase2.rotation.rotation!;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn Presets.APLMeleeWeavePhase1.rotation.rotation!;\n\t\t\t}\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t// Raid sim presets dont work very well with SoD specs between phases\n\t\t// and we dont support raid sim atm so just comment this out\n\t\t// {\n\t\t// \tspec: Spec.SpecHunter,\n\t\t// \ttooltip: 'Beast Mastery Hunter',\n\t\t// \tdefaultName: 'Beast Mastery',\n\t\t// \ticonUrl: getSpecIcon(Class.ClassHunter, 0),\n\n\t\t// \ttalents: Presets.DefaultTalentsBeastMastery.data,\n\t\t// \tspecOptions: Presets.BMDefaultOptions,\n\t\t// \tconsumes: Presets.DefaultConsumes,\n\t\t// \tdefaultFactionRaces: {\n\t\t// \t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t// \t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t// \t\t[Faction.Horde]: Race.RaceOrc,\n\t\t// \t},\n\t\t// \tdefaultGear: {\n\t\t// \t\t[Faction.Unknown]: {},\n\t\t// \t\t[Faction.Alliance]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t// \t\t},\n\t\t// \t\t[Faction.Horde]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t// \t\t},\n\t\t// \t},\n\t\t// },\n\t\t// {\n\t\t// \tspec: Spec.SpecHunter,\n\t\t// \ttooltip: 'Marksmanship Hunter',\n\t\t// \tdefaultName: 'Marksmanship',\n\t\t// \ticonUrl: getSpecIcon(Class.ClassHunter, 1),\n\t\t// \ttalents: Presets.DefaultTalentsMarksman.data,\n\t\t// \tspecOptions: Presets.DefaultOptions,\n\t\t// \tconsumes: Presets.DefaultConsumes,\n\t\t// \tdefaultFactionRaces: {\n\t\t// \t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t// \t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t// \t\t[Faction.Horde]: Race.RaceOrc,\n\t\t// \t},\n\t\t// \tdefaultGear: {\n\t\t// \t\t[Faction.Unknown]: {},\n\t\t// \t\t[Faction.Alliance]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t// \t\t},\n\t\t// \t\t[Faction.Horde]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][1].gear,\n\t\t// \t\t},\n\t\t// \t},\n\t\t// },\n\t\t// {\n\t\t// \tspec: Spec.SpecHunter,\n\t\t// \ttooltip: 'Survival Hunter',\n\t\t// \tdefaultName: 'Survival',\n\t\t// \ticonUrl: getSpecIcon(Class.ClassHunter, 2),\n\n\t\t// \ttalents: Presets.DefaultTalentsSurvival.data,\n\t\t// \tspecOptions: Presets.DefaultOptions,\n\t\t// \tconsumes: Presets.DefaultConsumes,\n\t\t// \tdefaultFactionRaces: {\n\t\t// \t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t// \t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t// \t\t[Faction.Horde]: Race.RaceOrc,\n\t\t// \t},\n\t\t// \tdefaultGear: {\n\t\t// \t\t[Faction.Unknown]: {},\n\t\t// \t\t[Faction.Alliance]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][2].gear,\n\t\t// \t\t},\n\t\t// \t\t[Faction.Horde]: {\n\t\t// \t\t\t1: Presets.GearPresets[Phase.Phase1][2].gear,\n\t\t// \t\t},\n\t\t// \t},\n\t\t// },\n\t],\n});\n\nexport class HunterSimUI extends IndividualSimUI<Spec.SpecHunter> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecHunter>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["WeaponAmmo","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","numColumns","values","value","Ammo","AmmoNone","tooltip","actionId","ActionId","fromItemId","RazorArrow","JaggedArrow","IceThreadedArrow","ThoriumHeadedArrow","Doomshot","SolidShot","AccurateSlugs","IceThreadedBullet","MithrilGyroShot","RockshardPellets","ThoriumShells","MiniatureCannonBalls","QuiverInput","extraCssClasses","color","QuiverBonus","QuiverNone","Speed15","Speed14","Speed13","Speed12","Speed11","Speed10","PetTypeInput","PetType","PetNone","fromPetName","Cat","WindSerpent","PetUptime","InputHelpers.makeSpecOptionsNumberInput","label","labelTooltip","percent","InputHelpers.makeSpecOptionsBooleanInput","showWhen","player","getEquippedItem","ItemSlot","ItemSlotFeet","rune","id","HunterRune","RuneBootsDualWieldSpecialization","changeEmitter","TypedEvent","onAny","gearChangeEmitter","specOptionsChangeEmitter","SniperTrainingUptime","ItemSlotLegs","RuneLegsSniperTraining","PetAttackSpeedInput","InputHelpers.makeSpecOptionsEnumInput","name","PetAttackSpeed","One","OneTwo","OneThree","OneFour","OneFive","OneSix","OneSeven","Two","TwoFour","TwoFive","getSpecOptions","petType","Hunter_Options_PetType","HunterRotationConfig","inputs","InputHelpers.makeRotationEnumInput","RotationType","SingleTarget","Aoe","StingType","NoSting","ScorpidSting","SerpentSting","getSimpleRotation","type","InputHelpers.makeRotationBooleanInput","rotationChangeEmitter","talentsChangeEmitter","GearBeastMasteryPhase1","PresetUtils.makePresetGear","Phase1Gear","customCondition","getLevel","GearMarksmanPhase1","GearSurvivalPhase1","GearRangedBmPhase2","Phase2GearRangedBm","GearRangedMmPhase2","Phase2GearRangedMm","GearMeleePhase2","Phase2GearMelee","GearMeleeBmPhase3","Phase3GearMeleeBm","GearRangedMmPhase3","Phase3GearRangedMm","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","APLMeleeWeavePhase1","PresetUtils.makePresetAPLRotation","MeleeWeaveP1","APLMeleePhase2","MeleeP2","APLRangedBmPhase2","RangedBmP2","APLRangedMmPhase2","RangedMmP2","APLMeleeBmPhase3","MeleeBmP3","APLRangedMmPhase3","RangedMmP3","APLPresets","TalentsBeastMasteryPhase1","PresetUtils.makePresetTalents","SavedTalents","create","talentsString","TalentsMarksmanPhase1","TalentsSurvivalPhase1","TalentsBeastMasteryPhase2","TalentsMarksmanPhase2","TalentsSurvivalPhase2","TalentsRangedMMPhase3","TalentsMeleeBMPhase3","TalentPresets","DefaultTalents","PresetBuildMeleeBM","PresetUtils.makePresetBuild","PresetBuildRangedMM","DefaultOptions","HunterOptions","ammo","petTalents","petUptime","quiverBonus","Hunter_Options_QuiverBonus","petAttackSpeed","DefaultConsumes","Consumes","agilityElixir","AgilityElixir","ElixirOfAgility","defaultPotion","Potions","GreaterManaPotion","dragonBreathChili","enchantedSigil","EnchantedSigil","InnovationSigil","food","Food","FoodSagefishDelight","mainHandImbue","WeaponImbue","WildStrikes","offHandImbue","SolidWeightstone","spellPowerBuff","SpellPowerBuff","LesserArcaneElixir","strengthBuff","StrengthBuff","ElixirOfOgresStrength","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","battleShout","TristateEffect","TristateEffectRegular","divineSpirit","giftOfTheWild","TristateEffectImproved","powerWordFortitude","DefaultIndividualBuffs","IndividualBuffs","blessingOfMight","blessingOfWisdom","sparkOfInspiration","saygesFortune","SaygesFortune","SaygesDamage","DefaultDebuffs","Debuffs","curseOfRecklessness","dreamstate","faerieFire","homunculi","mangle","OtherDefaults","distanceFromTarget","profession1","Profession","Enchanting","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecHunter","cssClass","cssScheme","knownIssues","warnings","epStats","Stat","StatStamina","StatIntellect","StatStrength","StatAgility","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatMP5","StatSpellPower","StatSpellDamage","StatNaturePower","StatArcanePower","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","PseudoStatRangedDps","epReferenceStat","displayStats","StatHealth","modifyDisplayStats","stats","Stats","addStat","getTalents","lethalShots","Mechanics.MELEE_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.DefaultTalents","data","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","HunterInputs.PetTypeInput","HunterInputs.WeaponAmmo","HunterInputs.QuiverInput","rotationInputs","HunterInputs.HunterRotationConfig","petConsumeInputs","ConsumablesInputs.PetScrollOfAgility","ConsumablesInputs.PetScrollOfStrength","includeBuffDebuffInputs","BuffDebuffInputs.SpellScorchDebuff","BuffDebuffInputs.StaminaBuff","excludeBuffDebuffInputs","otherInputs","HunterInputs.PetAttackSpeedInput","HunterInputs.PetUptime","HunterInputs.SniperTrainingUptime","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","builds","Presets.PresetBuildMeleeBM","Presets.PresetBuildRangedMM","autoRotation","ItemSlotWaist","RuneBeltMeleeSpecialist","Presets.APLMeleeBmPhase3","rotation","Presets.APLMeleePhase2","Presets.APLMeleeWeavePhase1","Presets.APLRangedMmPhase3","getTalentTree","Presets.APLRangedMmPhase2","Presets.APLRangedBmPhase2","raidSimPresets","HunterSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}