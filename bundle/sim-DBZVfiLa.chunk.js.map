{"version":3,"file":"sim-DBZVfiLa.chunk.js","sources":["../../../ui/protection_paladin/inputs.ts","../../../ui/protection_paladin/presets.ts","../../../ui/protection_paladin/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\n\nimport {\n\tPaladinAura,\n\tPaladinSeal,\n} from '../core/proto/paladin.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const AuraSelection = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecProtectionPaladin>({\n\tfieldName: 'aura',\n\tlabel: 'Aura',\n\tvalues: [\n\t\t{ name: 'None', value: PaladinAura.NoPaladinAura },\n\t\t{ name: 'Devotion Aura', value: PaladinAura.DevotionAura },\n\t\t{ name: 'Retribution Aura', value: PaladinAura.RetributionAura },\n\t],\n});\n\n// export const StartingSealSelection = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecProtectionPaladin>({\n// \tfieldName: 'seal',\n// \tlabel: 'Seal',\n// \tlabelTooltip: 'The seal active before encounter',\n// \tvalues: [\n// \t\t{ name: 'Righteousness', value: PaladinSeal.Righteousness },\n// \t\t{ name: 'Command', value: PaladinSeal.Command },\n// \t],\n// });\n\n// export const UseAvengingWrath = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecProtectionPaladin>({\n// \tfieldName: 'useAvengingWrath',\n// \tlabel: 'Use Avenging Wrath',\n// });\n","import { Phase } from '../core/constants/other.js';\nimport {\n\tConsumes,\n\tFlask,\n\tFood\n} from '../core/proto/common.js';\nimport { SavedTalents } from '../core/proto/ui.js';\n\nimport {\n\tPaladinAura,\n\tProtectionPaladin_Options as ProtectionPaladinOptions,\n} from '../core/proto/paladin.js';\n\nimport * as PresetUtils from '../core/preset_utils.js';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport BlankGear from './gear_sets/blank.gear.json';\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\n\nexport const GearPresets = {\n  [Phase.Phase1]: [\n    GearBlank,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultGear = GearPresets[Phase.Phase1][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nimport DefaultApl from './apls/default.apl.json';\n\nexport const DefaultAPL = PresetUtils.makePresetAPLRotation('Default (969)', DefaultApl);\n\nexport const APLPresets = {\n  [Phase.Phase1]: [\n    DefaultAPL,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\n// TODO: Add Phase 2 preset and pull from map\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n  25: APLPresets[Phase.Phase1][0],\n  40: APLPresets[Phase.Phase1][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const GenericAoeTalents = {\n\tname: 'Baseline Example',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-05005135200132311333312321-511302012003',\n\t}),\n};\n\nexport const TalentPresets = {\n  [Phase.Phase1]: [\n    GenericAoeTalents,\n  ],\n  [Phase.Phase2]: [\n  ]\n};\n\nexport const DefaultTalents = TalentPresets[Phase.Phase1][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = ProtectionPaladinOptions.create({\n\taura: PaladinAura.RetributionAura,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskUnknown,\n\tfood: Food.FoodUnknown,\n});\n","import * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport {\n\tClass,\n\tDebuffs,\n\tFaction,\n\tIndividualBuffs,\n\tPartyBuffs,\nPseudoStat,\n\tRace,\n\tRaidBuffs,\n\tSpec,\n\tStat, \tTristateEffect,\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport * as ProtectionPaladinInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecProtectionPaladin, {\n\tcssClass: 'protection-paladin-sim-ui',\n\tcssScheme: 'paladin',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatArmor,\n\t\tStat.StatBonusArmor,\n\t\tStat.StatDefense,\n\t\tStat.StatBlock,\n\t\tStat.StatBlockValue,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatResilience,\n\t\tStat.StatNatureResistance,\n\t\tStat.StatShadowResistance,\n\t\tStat.StatFrostResistance,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatArmor,\n\t\tStat.StatBonusArmor,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatDefense,\n\t\tStat.StatBlock,\n\t\tStat.StatBlockValue,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatResilience,\n\t\tStat.StatNatureResistance,\n\t\tStat.StatShadowResistance,\n\t\tStat.StatFrostResistance,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatArmor]: 0.07,\n\t\t\t[Stat.StatBonusArmor]: 0.06,\n\t\t\t[Stat.StatStamina]: 1.14,\n\t\t\t[Stat.StatStrength]: 1.00,\n\t\t\t[Stat.StatAgility]: 0.62,\n\t\t\t[Stat.StatAttackPower]: 0.26,\n\t\t\t[Stat.StatExpertise]: 0.69,\n\t\t\t[Stat.StatMeleeHit]: 0.79,\n\t\t\t[Stat.StatMeleeCrit]: 0.30,\n\t\t\t[Stat.StatMeleeHaste]: 0.17,\n\t\t\t[Stat.StatArmorPenetration]: 0.04,\n\t\t\t[Stat.StatSpellPower]: 0.13,\n\t\t\t[Stat.StatBlock]: 0.52,\n\t\t\t[Stat.StatBlockValue]: 0.28,\n\t\t\t[Stat.StatDodge]: 0.46,\n\t\t\t[Stat.StatParry]: 0.61,\n\t\t\t[Stat.StatDefense]: 0.54,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 3.33,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tpowerWordFortitude: TristateEffect.TristateEffectImproved,\n\t\t\tstrengthOfEarthTotem: TristateEffect.TristateEffectRegular,\n\t\t\tarcaneBrilliance: true,\n\t\t\tmoonkinAura: true,\n\t\t\tmanaSpringTotem: TristateEffect.TristateEffectRegular,\n\t\t\tthorns: TristateEffect.TristateEffectImproved,\n\t\t\tdevotionAura: TristateEffect.TristateEffectImproved,\n\t\t\tshadowProtection: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfSanctuary: true,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tjudgementOfWisdom: true,\n\t\t\tjudgementOfLight: true,\n\t\t\tfaerieFire: true,\n\t\t\texposeArmor: TristateEffect.TristateEffectImproved,\n\t\t\tsunderArmor: true,\n\t\t\tthunderClap: TristateEffect.TristateEffectImproved,\n\t\t\tinsectSwarm: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [\n\t],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.IncomingHps,\n\t\t\tOtherInputs.HealingCadence,\n\t\t\tOtherInputs.HealingCadenceVariation,\n\t\t\tOtherInputs.BurstWindow,\n\t\t\tOtherInputs.HpPercentForDefensives,\n\t\t\tOtherInputs.InspirationUptime,\n\t\t\tProtectionPaladinInputs.AuraSelection,\n\t\t\t// ProtectionPaladinInputs.StartingSealSelection,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase2],\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase2],\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase2],\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t],\n\t},\n\n\tautoRotation: player => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecProtectionPaladin,\n\t\t\ttooltip: 'Protection Paladin',\n\t\t\tdefaultName: 'Protection',\n\t\t\ticonUrl: getSpecIcon(Class.ClassPaladin, 1),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceUnknown,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class ProtectionPaladinSimUI extends IndividualSimUI<Spec.SpecProtectionPaladin> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecProtectionPaladin>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["AuraSelection","InputHelpers.makeSpecOptionsEnumInput","fieldName","label","values","name","value","PaladinAura","NoPaladinAura","DevotionAura","RetributionAura","GearBlank","PresetUtils.makePresetGear","GearPresets","Phase","Phase1","Phase2","DefaultGear","DefaultAPL","PresetUtils.makePresetAPLRotation","DefaultApl","APLPresets","DefaultAPLs","GenericAoeTalents","data","SavedTalents","create","talentsString","TalentPresets","DefaultTalents","DefaultOptions","ProtectionPaladinOptions","aura","DefaultConsumes","Consumes","flask","Flask","FlaskUnknown","food","Food","FoodUnknown","SPEC_CONFIG","registerSpecConfig","Spec","SpecProtectionPaladin","cssClass","cssScheme","knownIssues","epStats","Stat","StatStamina","StatStrength","StatAgility","StatAttackPower","StatMeleeHit","StatSpellHit","StatMeleeCrit","StatExpertise","StatMeleeHaste","StatArmorPenetration","StatSpellPower","StatArmor","StatBonusArmor","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatNatureResistance","StatShadowResistance","StatFrostResistance","epPseudoStats","PseudoStat","PseudoStatMainHandDps","epReferenceStat","displayStats","StatHealth","defaults","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","powerWordFortitude","strengthOfEarthTotem","TristateEffectRegular","arcaneBrilliance","moonkinAura","manaSpringTotem","thorns","devotionAura","shadowProtection","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfSanctuary","blessingOfWisdom","blessingOfMight","debuffs","Debuffs","judgementOfWisdom","judgementOfLight","faerieFire","exposeArmor","sunderArmor","thunderClap","insectSwarm","playerIconInputs","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","OtherInputs.TankAssignment","OtherInputs.IncomingHps","OtherInputs.HealingCadence","OtherInputs.HealingCadenceVariation","OtherInputs.BurstWindow","OtherInputs.HpPercentForDefensives","OtherInputs.InspirationUptime","ProtectionPaladinInputs.AuraSelection","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","player","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassPaladin","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","defaultGear","ProtectionPaladinSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}