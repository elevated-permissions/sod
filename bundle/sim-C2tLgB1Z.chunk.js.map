{"version":3,"file":"sim-C2tLgB1Z.chunk.js","sources":["../../../ui/enhancement_shaman/inputs.ts","../../../ui/enhancement_shaman/presets.ts","../../../ui/enhancement_shaman/sim.ts"],"sourcesContent":["import { Spec } from '../core/proto/common.js';\nimport { ShamanSyncType } from '../core/proto/shaman.js';\n\nimport * as InputHelpers from '../core/components/input_helpers.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip:\n\t\t`Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: \"Automatic\", value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport {\n\tAgilityElixir,\n\tConsumes,\n\tDebuffs,\n\tEnchantedSigil,\n\tFirePowerBuff,\n\tFlask,\n\tFood,\n\tIndividualBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tSaygesFortune,\n\tSpellPowerBuff,\n\tStrengthBuff,\n\tTristateEffect,\n\tWeaponImbue,\n\tZanzaBuff,\n} from '../core/proto/common.js';\nimport { EnhancementShaman_Options as EnhancementShamanOptions, ShamanSyncType } from '../core/proto/shaman.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport Phase1APL from './apls/phase_1.apl.json';\nimport Phase2APL from './apls/phase_2.apl.json';\nimport Phase3APL from './apls/phase_3.apl.json';\nimport Phase1Gear from './gear_sets/phase_1.gear.json';\nimport Phase2Gear from './gear_sets/phase_2.gear.json';\nimport Phase3Gear from './gear_sets/phase_3.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearPhase1 = PresetUtils.makePresetGear('Phase 1', Phase1Gear);\nexport const GearPhase2 = PresetUtils.makePresetGear('Phase 2', Phase2Gear);\nexport const GearPhase3 = PresetUtils.makePresetGear('Phase 3', Phase3Gear);\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearPhase1],\n\t[Phase.Phase2]: [GearPhase2],\n\t[Phase.Phase3]: [GearPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\n// TODO: Phase 3\nexport const DefaultGear = GearPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const APLPhase1 = PresetUtils.makePresetAPLRotation('Phase 1', Phase1APL);\nexport const APLPhase2 = PresetUtils.makePresetAPLRotation('Phase 2', Phase2APL);\nexport const APLPhase3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3APL);\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [APLPhase1],\n\t[Phase.Phase2]: [APLPhase2],\n\t[Phase.Phase3]: [APLPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultAPLs: Record<number, PresetUtils.PresetRotation> = {\n\t25: APLPresets[Phase.Phase1][0],\n\t40: APLPresets[Phase.Phase2][0],\n\t50: APLPresets[Phase.Phase3][0],\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\nexport const TalentsPhase1 = {\n\tname: 'Phase 1',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202101',\n\t}),\n};\n\nexport const TalentsPhase2 = {\n\tname: 'Phase 2',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '-5005202105023051',\n\t}),\n};\n\nexport const TalentsPhase3 = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '05003-5005132105023051',\n\t}),\n};\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [TalentsPhase1],\n\t[Phase.Phase2]: [TalentsPhase2],\n\t[Phase.Phase3]: [TalentsPhase3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultTalents = TalentPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tsyncType: ShamanSyncType.Auto,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfTheMongoose,\n\tdefaultPotion: Potions.MajorManaPotion,\n\tdragonBreathChili: true,\n\tenchantedSigil: EnchantedSigil.LivingDreamsSigil,\n\tfirePowerBuff: FirePowerBuff.ElixirOfFirepower,\n\tflask: Flask.FlaskOfEverlastingNightmares,\n\tfood: Food.FoodGrilledSquid,\n\tmainHandImbue: WeaponImbue.WindfuryWeapon,\n\tmildlyIrradiatedRejuvPot: true,\n\toffHandImbue: WeaponImbue.WindfuryWeapon,\n\tspellPowerBuff: SpellPowerBuff.ArcaneElixir,\n\tstrengthBuff: StrengthBuff.ElixirOfGiants,\n\tzanzaBuff: ZanzaBuff.AtalaiMojoOfWar,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\taspectOfTheLion: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdivineSpirit: true,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tgraceOfAirTotem: TristateEffect.TristateEffectImproved,\n\tmanaSpringTotem: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tfervorOfTheTempleExplorer: true,\n\tsaygesFortune: SaygesFortune.SaygesDamage,\n\tsongflowerSerenade: true,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfElementsNew: TristateEffect.TristateEffectRegular,\n\tcurseOfRecklessness: true,\n\tfaerieFire: true,\n\thomunculi: 70, // 70% average uptime default\n\timprovedScorch: true,\n\tserpentsStrikerFistDebuff: true,\n\tstormstrike: true,\n\tsunderArmor: true,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Alchemy,\n\tprofession2: Profession.Enchanting,\n};\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport { APLRotation } from '../core/proto/apl.js';\nimport { Class, Faction, ItemSlot, PartyBuffs, PseudoStat, Race, Spec, Stat } from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon, specNames } from '../core/proto_utils/utils.js';\nimport * as ShamanInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: 'shaman',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatFirePower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\n\tdefaults: {\n\t\trace: Race.RaceTroll,\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatIntellect]: 0.02,\n\t\t\t\t[Stat.StatAgility]: 1.12,\n\t\t\t\t[Stat.StatStrength]: 2.29,\n\t\t\t\t[Stat.StatSpellPower]: 1.15,\n\t\t\t\t[Stat.StatSpellDamage]: 1.15,\n\t\t\t\t[Stat.StatFirePower]: 0.63,\n\t\t\t\t[Stat.StatNaturePower]: 0.48,\n\t\t\t\t[Stat.StatSpellHit]: 0.03, //default EP assumes cap\n\t\t\t\t[Stat.StatSpellCrit]: 1.94,\n\t\t\t\t[Stat.StatSpellHaste]: 2.97,\n\t\t\t\t[Stat.StatMP5]: 0.01,\n\t\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t\t[Stat.StatMeleeHit]: 9.62,\n\t\t\t\t[Stat.StatMeleeCrit]: 14.8,\n\t\t\t\t[Stat.StatMeleeHaste]: 11.84, //haste is complicated\n\t\t\t\t[Stat.StatArmorPenetration]: 0.35,\n\t\t\t\t[Stat.StatExpertise]: 1.92, //default EP assumes cap\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 8.15,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 5.81,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.BlessingOfWisdom, BuffDebuffInputs.ManaSpringTotem, BuffDebuffInputs.SpiritBuff],\n\texcludeBuffDebuffInputs: [BuffDebuffInputs.BleedDebuff],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [ShamanInputs.SyncTypeInput, OtherInputs.TankAssignment, OtherInputs.InFrontOfTarget],\n\t},\n\titemSwapConfig: {\n\t\titemSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\t\tnote: 'Swap items are given the highest available rank of Rockbiter Weapon',\n\t},\n\tcustomSections: [\n\t\t// TotemsSection,\n\t],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [...Presets.TalentPresets[Phase.Phase3], ...Presets.TalentPresets[Phase.Phase2], ...Presets.TalentPresets[Phase.Phase1]],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [...Presets.APLPresets[Phase.Phase3], ...Presets.APLPresets[Phase.Phase2], ...Presets.APLPresets[Phase.Phase1]],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [...Presets.GearPresets[Phase.Phase3], ...Presets.GearPresets[Phase.Phase2], ...Presets.GearPresets[Phase.Phase1]],\n\t},\n\n\tautoRotation: (player): APLRotation => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttooltip: specNames[Spec.SpecBalanceDruid],\n\t\t\tdefaultName: 'Balance',\n\t\t\ticonUrl: getSpecIcon(Class.ClassDruid, 0),\n\n\t\t\ttalents: Presets.DefaultTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","fieldName","label","labelTooltip","values","name","value","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","GearPhase1","PresetUtils.makePresetGear","GearPhase2","Phase2Gear","GearPhase3","Phase3Gear","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","APLPhase1","PresetUtils.makePresetAPLRotation","Phase1APL","APLPhase2","Phase2APL","APLPhase3","Phase3APL","APLPresets","DefaultAPLs","TalentsPhase1","data","SavedTalents","create","talentsString","TalentsPhase2","TalentsPhase3","TalentPresets","DefaultTalents","DefaultOptions","EnhancementShamanOptions","syncType","DefaultConsumes","Consumes","agilityElixir","AgilityElixir","ElixirOfTheMongoose","defaultPotion","Potions","MajorManaPotion","dragonBreathChili","enchantedSigil","EnchantedSigil","LivingDreamsSigil","firePowerBuff","FirePowerBuff","ElixirOfFirepower","flask","Flask","FlaskOfEverlastingNightmares","food","Food","FoodGrilledSquid","mainHandImbue","WeaponImbue","WindfuryWeapon","mildlyIrradiatedRejuvPot","offHandImbue","spellPowerBuff","SpellPowerBuff","ArcaneElixir","strengthBuff","StrengthBuff","ElixirOfGiants","zanzaBuff","ZanzaBuff","AtalaiMojoOfWar","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","aspectOfTheLion","battleShout","TristateEffect","TristateEffectImproved","divineSpirit","giftOfTheWild","graceOfAirTotem","manaSpringTotem","strengthOfEarthTotem","DefaultIndividualBuffs","IndividualBuffs","fervorOfTheTempleExplorer","saygesFortune","SaygesFortune","SaygesDamage","songflowerSerenade","DefaultDebuffs","Debuffs","curseOfElementsNew","TristateEffectRegular","curseOfRecklessness","faerieFire","homunculi","improvedScorch","serpentsStrikerFistDebuff","stormstrike","sunderArmor","OtherDefaults","profession1","Profession","Alchemy","profession2","Enchanting","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellDamage","StatFirePower","StatNaturePower","StatSpellCrit","StatSpellHit","StatSpellHaste","StatMP5","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","race","Race","RaceTroll","gear","Presets.DefaultGear","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerIconInputs","includeBuffDebuffInputs","BuffDebuffInputs.BlessingOfWisdom","BuffDebuffInputs.ManaSpringTotem","BuffDebuffInputs.SpiritBuff","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","otherInputs","inputs","ShamanInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapConfig","itemSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","note","customSections","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","player","Presets.DefaultAPLs","getLevel","rotation","raidSimPresets","spec","SpecBalanceDruid","tooltip","specNames","defaultName","iconUrl","getSpecIcon","Class","ClassDruid","otherDefaults","defaultFactionRaces","Faction","Unknown","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}