{"version":3,"file":"sim-CAVi4FWH.chunk.js","sources":["../../../ui/rogue/inputs.ts","../../../ui/rogue/presets.ts","../../../ui/rogue/sim.ts"],"sourcesContent":["import * as InputHelpers from '../core/components/input_helpers.js';\nimport { Player } from '../core/player.js';\nimport { ItemSlot, Spec } from '../core/proto/common.js';\nimport { RogueRune } from '../core/proto/rogue.js';\n\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const HonorOfThievesCritRate = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecRogue>({\n\tfieldName: 'honorAmongThievesCritRate',\n\tlabel: 'Honor Among Thieves Crit Rate',\n\tlabelTooltip: 'Number of crits other group members generate within 100 seconds',\n});","import { Phase } from '../core/constants/other.js';\nimport * as PresetUtils from '../core/preset_utils.js';\nimport { AgilityElixir, Consumes, Debuffs, IndividualBuffs, Profession, RaidBuffs, StrengthBuff, TristateEffect, WeaponImbue } from '../core/proto/common.js';\nimport { RogueOptions } from '../core/proto/rogue.js';\nimport { SavedTalents } from '../core/proto/ui.js';\nimport SinisterApl25 from './apls/basic_strike_25.apl.json';\nimport MutilateApl40 from './apls/mutilate.apl.json';\nimport MutilateDPSApl50 from './apls/Mutilate_DPS_50.apl.json';\nimport MutilateIEAApl40 from './apls/mutilate_IEA.apl.json';\nimport MutilateIEAApl50 from './apls/Mutilate_IEA_50.apl.json';\nimport SaberDPSApl50 from './apls/Saber_DPS_50.apl.json';\nimport SaberIEAApl50 from './apls/Saber_IEA_50.apl.json';\nimport BlankGear from './gear_sets/blank.gear.json';\nimport P1CombatGear from './gear_sets/p1_combat.gear.json';\nimport P1Daggers from './gear_sets/p1_daggers.gear.json';\nimport P2DaggersGear from './gear_sets/p2_daggers.gear.json';\nimport P3DaggersGear from './gear_sets/p3_muti.gear.json';\nimport P3CombatGear from './gear_sets/p3_saber.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Gear Presets\n///////////////////////////////////////////////////////////////////////////\n\nexport const GearBlank = PresetUtils.makePresetGear('Blank', BlankGear);\nexport const GearDaggersP1 = PresetUtils.makePresetGear('P1 Daggers', P1Daggers, { customCondition: player => player.getLevel() == 25 });\nexport const GearCombatP1 = PresetUtils.makePresetGear('P1 Combat', P1CombatGear, { customCondition: player => player.getLevel() == 25 });\nexport const GearDaggersP2 = PresetUtils.makePresetGear('P2 Daggers', P2DaggersGear, { customCondition: player => player.getLevel() == 40 });\nexport const GearDaggersP3 = PresetUtils.makePresetGear('P3 Daggers', P3DaggersGear, { customCondition: player => player.getLevel() >= 50 });\nexport const GearCombatP3 = PresetUtils.makePresetGear('P3 Combat', P3CombatGear, { customCondition: player => player.getLevel() >= 50 });\n\nexport const GearPresets = {\n\t[Phase.Phase1]: [GearDaggersP1, GearCombatP1],\n\t[Phase.Phase2]: [GearDaggersP2],\n\t[Phase.Phase3]: [GearDaggersP3, GearCombatP3],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultGear = GearPresets[Phase.Phase3][0];\n\n///////////////////////////////////////////////////////////////////////////\n//                                 APL Presets[]\n///////////////////////////////////////////////////////////////////////////\n\nexport const ROTATION_PRESET_MUTILATE = PresetUtils.makePresetAPLRotation('P2 Mutilate', MutilateApl40, { customCondition: player => player.getLevel() == 40 });\nexport const ROTATION_PRESET_MUTILATE_IEA = PresetUtils.makePresetAPLRotation('P2 Mutilate IEA', MutilateIEAApl40, {\n\tcustomCondition: player => player.getLevel() == 40,\n});\nexport const ROTATION_PRESET_SINISTER_25 = PresetUtils.makePresetAPLRotation('P1 Sinister', SinisterApl25, { customCondition: player => player.getLevel() == 25 });\nexport const ROTATION_PRESET_MUTILATE_DPS_50 = PresetUtils.makePresetAPLRotation('P3 Mutilate DPS', MutilateDPSApl50, { customCondition: player => player.getLevel() >= 50 });\nexport const ROTATION_PRESET_MUTILATE_IEA_50 = PresetUtils.makePresetAPLRotation('P3 Mutilate IEA', MutilateIEAApl50, { customCondition: player => player.getLevel() >= 50 });\nexport const ROTATION_PRESET_SABER_SLASH_DPS_50 = PresetUtils.makePresetAPLRotation('P3 Saber Slash DPS', SaberDPSApl50, { customCondition: player => player.getLevel() >= 50 });\nexport const ROTATION_PRESET_SABER_SLASH_IEA_50 = PresetUtils.makePresetAPLRotation('P3 Saber Slash IEA', SaberIEAApl50, { customCondition: player => player.getLevel() >= 50 });\n\nexport const APLPresets = {\n\t[Phase.Phase1]: [ROTATION_PRESET_MUTILATE, ROTATION_PRESET_SINISTER_25],\n\t[Phase.Phase2]: [ROTATION_PRESET_MUTILATE, ROTATION_PRESET_MUTILATE_IEA],\n\t[Phase.Phase3]: [ROTATION_PRESET_MUTILATE_DPS_50, ROTATION_PRESET_SABER_SLASH_DPS_50, \n\t\tROTATION_PRESET_MUTILATE_IEA_50, ROTATION_PRESET_SABER_SLASH_IEA_50],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultAPLs: Record<number, Record<number, PresetUtils.PresetRotation>> = {\n\t25: {\n\t\t0: APLPresets[Phase.Phase1][0],\n\t\t1: APLPresets[Phase.Phase1][1],\n\t},\n\t40: {\n\t\t0: APLPresets[Phase.Phase2][0],\n\t\t1: APLPresets[Phase.Phase2][0],\n\t\t2: APLPresets[Phase.Phase2][0],\n\t},\n\t50: {\n\t\t0: APLPresets[Phase.Phase3][0],\n\t\t1: APLPresets[Phase.Phase3][0],\n\t\t2: APLPresets[Phase.Phase3][0],\n\t},\n};\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Talent Presets\n///////////////////////////////////////////////////////////////////////////\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/classic/talent-calc and copy the numbers in the url.\n\n// Preset name must be unique. Ex: 'Mutilate DPS' cannot be used as a name more than once\nexport const CombatDagger25Talents = PresetUtils.makePresetTalents('P1 Combat Dagger', SavedTalents.create({ talentsString: '-023305002001' }), {\n\tcustomCondition: player => player.getLevel() == 25,\n});\n\nexport const ColdBloodMutilate40Talents = PresetUtils.makePresetTalents('P2 CB Mutilate', SavedTalents.create({ talentsString: '005303103551--05' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const IEAMutilate40Talents = PresetUtils.makePresetTalents('P2 CB/IEA Mutilate', SavedTalents.create({ talentsString: '005303121551--05' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const CombatMutilate40Talents = PresetUtils.makePresetTalents('P2 AR/BF Mutilate', SavedTalents.create({ talentsString: '-0053052020550100201' }), {\n\tcustomCondition: player => player.getLevel() == 40,\n});\n\nexport const SaberColdBloodDualWieldSpec50Talents = PresetUtils.makePresetTalents('P3 Saber CB/DWS', SavedTalents.create({ talentsString: '005323101501-320015202005' }), {\n\tcustomCondition: player => player.getLevel() >= 50,\n});\n\nexport const MutilateColdBloodDualWieldSpec50Talents = PresetUtils.makePresetTalents('P3 Mutilate CB/DWS', SavedTalents.create({ talentsString: '005323101501-320305200005' }), {\n\tcustomCondition: player => player.getLevel() >= 50,\n});\n\nexport const SaberColdBloodSealFate50Talents = PresetUtils.makePresetTalents('P3 Saber Cold Blood', SavedTalents.create({ talentsString: '00532310155105-320005' }), {\n\tcustomCondition: player => player.getLevel() >= 50,\n});\n\nexport const MutilateColdBloodSealFate50Talents = PresetUtils.makePresetTalents('P3 Mutilate Cold Blood', SavedTalents.create({ talentsString: '00532310155105-320302' }), {\n\tcustomCondition: player => player.getLevel() >= 50,\n});\n\nexport const TalentPresets = {\n\t[Phase.Phase1]: [CombatDagger25Talents],\n\t[Phase.Phase2]: [ColdBloodMutilate40Talents, IEAMutilate40Talents, CombatMutilate40Talents],\n\t[Phase.Phase3]: [MutilateColdBloodSealFate50Talents, SaberColdBloodSealFate50Talents, \n\t\tMutilateColdBloodDualWieldSpec50Talents, SaberColdBloodDualWieldSpec50Talents],\n\t[Phase.Phase4]: [],\n\t[Phase.Phase5]: [],\n};\n\nexport const DefaultTalentsAssassin = TalentPresets[Phase.Phase3][0];\nexport const DefaultTalentsCombat = TalentPresets[Phase.Phase3][0];\nexport const DefaultTalentsSubtlety = TalentPresets[Phase.Phase3][0];\n\nexport const DefaultTalents = DefaultTalentsAssassin;\n\n///////////////////////////////////////////////////////////////////////////\n//                                 Options\n///////////////////////////////////////////////////////////////////////////\n\nexport const DefaultOptions = RogueOptions.create({\n\thonorAmongThievesCritRate: 100,\n});\n\n///////////////////////////////////////////////////////////////////////////\n//                         Consumes/Buffs/Debuffs\n///////////////////////////////////////////////////////////////////////////\n\nexport const P1Consumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfLesserAgility,\n\tdragonBreathChili: false,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.BlackfathomSharpeningStone,\n});\n\nexport const P2Consumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfAgility,\n\tdragonBreathChili: false,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.ShadowOil,\n});\n\nexport const P3Consumes = Consumes.create({\n\tagilityElixir: AgilityElixir.ElixirOfGreaterAgility,\n\tdragonBreathChili: false,\n\tstrengthBuff: StrengthBuff.ElixirOfOgresStrength,\n\tmainHandImbue: WeaponImbue.WildStrikes,\n\toffHandImbue: WeaponImbue.ShadowOil,\n})\n\nexport const DefaultConsumes = {\n\t[Phase.Phase1]: P1Consumes,\n\t[Phase.Phase2]: P2Consumes,\n\t[Phase.Phase3]: P3Consumes,\n};\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\taspectOfTheLion: true,\n\tbattleShout: TristateEffect.TristateEffectRegular,\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tstrengthOfEarthTotem: TristateEffect.TristateEffectImproved,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tblessingOfMight: TristateEffect.TristateEffectRegular,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tcurseOfRecklessness: true,\n\tdreamstate: true,\n\tfaerieFire: true,\n\tsunderArmor: true,\n\tmangle: true,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Leatherworking,\n};\n","import * as BuffDebuffInputs from '../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../core/components/other_inputs.js';\nimport { Phase } from '../core/constants/other.js';\nimport { IndividualSimUI, registerSpecConfig } from '../core/individual_sim_ui.js';\nimport { Player } from '../core/player.js';\nimport {\n\tClass,\n\tFaction,\n\tItemSlot,\n\tPartyBuffs,\n\tPseudoStat,\n\tRace,\n\tSpec,\n\tStat,\n\tTarget,\n\tWeaponType\n} from '../core/proto/common.js';\nimport { Stats } from '../core/proto_utils/stats.js';\nimport { getSpecIcon } from '../core/proto_utils/utils.js';\nimport { HonorOfThievesCritRate } from './inputs';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecRogue, {\n\tcssClass: 'rogue-sim-ui',\n\tcssScheme: 'rogue',\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [\n\t\t'Rotations are not fully optimized, especially for non-standard setups.',\n\t],\n\twarnings: [\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.sim.encounter.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tconst hasNoArmor = !!(simUI.sim.encounter.targets ?? []).find((target: Target) => new Stats(target.stats).getStat(Stat.StatArmor) <= 0)\n\t\t\t\t\tif (hasNoArmor) {\n\t\t\t\t\t\treturn 'One or more targets have no armor. Check advanced encounter settings.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\t(simUI: IndividualSimUI<Spec.SpecRogue>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: simUI.player.changeEmitter,\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tif (simUI.player.getTalents().maceSpecialization) {\n\t\t\t\t\t\tif (simUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotMainHand)?.item.weaponType == WeaponType.WeaponTypeMace ||\n\t\t\t\t\t\t\tsimUI.player.getGear().getEquippedItem(ItemSlot.ItemSlotOffHand)?.item.weaponType == WeaponType.WeaponTypeMace) {\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn '\"Mace Specialization\" talent selected, but maces not equipped.';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatSpellPower,\n\t\tStat.StatNaturePower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t],\n\tepPseudoStats: [\n\t\tPseudoStat.PseudoStatMainHandDps,\n\t\tPseudoStat.PseudoStatOffHandDps,\n\t],\n\t// Reference stat against which to calculate EP.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatSpellDamage,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.DefaultGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatAgility]: 1.69,\n\t\t\t[Stat.StatStrength]: 1.10,\n\t\t\t[Stat.StatAttackPower]: 1,\n\t\t\t[Stat.StatSpellDamage]: .68,\n\t\t\t[Stat.StatNaturePower]: .68,\n\t\t\t[Stat.StatSpellCrit]: 2.0,\n\t\t\t[Stat.StatSpellHit]: 5.54,\n\t\t\t[Stat.StatMeleeHit]: 14.2,\n\t\t\t[Stat.StatMeleeCrit]: 8.64,\n\t\t\t[Stat.StatMeleeHaste]: 6.51,\n\t\t}, {\n\t\t\t[PseudoStat.PseudoStatMainHandDps]: 2.94,\n\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.45,\n\t\t}),\n\n\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes[Phase.Phase3],\n\t\t// Default talents.\n\t\ttalents: Presets.DefaultTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\tplayerInputs: {\n\t\tinputs: []\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.SpellCritBuff,\n\t\tBuffDebuffInputs.SpellShadowWeavingDebuff,\n\t\tBuffDebuffInputs.NatureSpellDamageDebuff,\n\t\tBuffDebuffInputs.MekkatorqueFistDebuff,\n\t\tBuffDebuffInputs.SpellScorchDebuff,\n\t\tBuffDebuffInputs.PowerInfusion\n\t],\n\texcludeBuffDebuffInputs: [\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\tHonorOfThievesCritRate,\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\t...Presets.TalentPresets[Phase.Phase3],\n\t\t\t...Presets.TalentPresets[Phase.Phase2],\n\t\t\t...Presets.TalentPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\t...Presets.APLPresets[Phase.Phase3],\n\t\t\t...Presets.APLPresets[Phase.Phase2],\n\t\t\t...Presets.APLPresets[Phase.Phase1],\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\t...Presets.GearPresets[Phase.Phase3],\n\t\t\t...Presets.GearPresets[Phase.Phase2],\n\t\t\t...Presets.GearPresets[Phase.Phase1],\n\t\t],\n\t},\n\n\tautoRotation: player => {\n\t\treturn Presets.DefaultAPLs[player.getLevel()][player.getTalentTree()].rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Assassination Rogue',\n\t\t\tdefaultName: 'Assassination',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 0),\n\n\t\t\ttalents: Presets.DefaultTalentsAssassin.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes[Phase.Phase1],\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRogue,\n\t\t\ttooltip: 'Combat Rogue',\n\t\t\tdefaultName: 'Combat',\n\t\t\ticonUrl: getSpecIcon(Class.ClassRogue, 1),\n\n\t\t\ttalents: Presets.DefaultTalentsCombat.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes[Phase.Phase1],\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceHuman,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.GearPresets[Phase.Phase1][0].gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class RogueSimUI extends IndividualSimUI<Spec.SpecRogue> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecRogue>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["HonorOfThievesCritRate","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","PresetUtils.makePresetGear","GearDaggersP1","P1Daggers","customCondition","player","getLevel","GearCombatP1","P1CombatGear","GearDaggersP2","P2DaggersGear","GearDaggersP3","P3DaggersGear","GearCombatP3","P3CombatGear","GearPresets","Phase","Phase1","Phase2","Phase3","Phase4","Phase5","DefaultGear","ROTATION_PRESET_MUTILATE","PresetUtils.makePresetAPLRotation","MutilateApl40","ROTATION_PRESET_MUTILATE_IEA","MutilateIEAApl40","ROTATION_PRESET_SINISTER_25","SinisterApl25","ROTATION_PRESET_MUTILATE_DPS_50","MutilateDPSApl50","ROTATION_PRESET_MUTILATE_IEA_50","MutilateIEAApl50","ROTATION_PRESET_SABER_SLASH_DPS_50","SaberDPSApl50","ROTATION_PRESET_SABER_SLASH_IEA_50","SaberIEAApl50","APLPresets","DefaultAPLs","CombatDagger25Talents","PresetUtils.makePresetTalents","SavedTalents","create","talentsString","ColdBloodMutilate40Talents","IEAMutilate40Talents","CombatMutilate40Talents","SaberColdBloodDualWieldSpec50Talents","MutilateColdBloodDualWieldSpec50Talents","SaberColdBloodSealFate50Talents","MutilateColdBloodSealFate50Talents","TalentPresets","DefaultTalentsAssassin","DefaultTalentsCombat","DefaultTalents","DefaultOptions","RogueOptions","honorAmongThievesCritRate","P1Consumes","Consumes","agilityElixir","AgilityElixir","ElixirOfLesserAgility","dragonBreathChili","strengthBuff","StrengthBuff","ElixirOfOgresStrength","mainHandImbue","WeaponImbue","WildStrikes","offHandImbue","BlackfathomSharpeningStone","P2Consumes","ElixirOfAgility","ShadowOil","P3Consumes","ElixirOfGreaterAgility","DefaultConsumes","DefaultRaidBuffs","RaidBuffs","aspectOfTheLion","battleShout","TristateEffect","TristateEffectRegular","giftOfTheWild","TristateEffectImproved","strengthOfEarthTotem","DefaultIndividualBuffs","IndividualBuffs","blessingOfMight","DefaultDebuffs","Debuffs","curseOfRecklessness","dreamstate","faerieFire","sunderArmor","mangle","OtherDefaults","profession1","Profession","Engineering","profession2","Leatherworking","SPEC_CONFIG","registerSpecConfig","Spec","SpecRogue","cssClass","cssScheme","knownIssues","warnings","simUI","updateOn","sim","encounter","changeEmitter","getContent","targets","find","target","Stats","stats","getStat","Stat","StatArmor","getTalents","maceSpecialization","getGear","getEquippedItem","ItemSlot","ItemSlotMainHand","item","weaponType","WeaponType","WeaponTypeMace","ItemSlotOffHand","epStats","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatSpellDamage","StatSpellPower","StatNaturePower","StatSpellHit","StatSpellCrit","StatMeleeHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.DefaultGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.DefaultTalents","data","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","playerInputs","inputs","playerIconInputs","includeBuffDebuffInputs","BuffDebuffInputs.SpellCritBuff","BuffDebuffInputs.SpellShadowWeavingDebuff","BuffDebuffInputs.NatureSpellDamageDebuff","BuffDebuffInputs.MekkatorqueFistDebuff","BuffDebuffInputs.SpellScorchDebuff","BuffDebuffInputs.PowerInfusion","excludeBuffDebuffInputs","otherInputs","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","encounterPicker","showExecuteProportion","presets","Presets.TalentPresets","rotations","Presets.APLPresets","Presets.GearPresets","autoRotation","Presets.DefaultAPLs","getTalentTree","rotation","raidSimPresets","spec","tooltip","defaultName","iconUrl","getSpecIcon","Class","ClassRogue","Presets.DefaultTalentsAssassin","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceHuman","Horde","RaceOrc","defaultGear","Presets.DefaultTalentsCombat","RogueSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}